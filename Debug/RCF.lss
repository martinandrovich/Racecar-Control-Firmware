
AVRASM ver. 2.2.7  C:\Users\Martin\Desktop\Racecar-Control-Firmware\main.asm Fri May 04 10:10:53 2018

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m32def.inc'
C:\Users\Martin\Desktop\Racecar-Control-Firmware\main.asm(33): Including file 'C:\Users\Martin\Desktop\Racecar-Control-Firmware\ram_table.inc'
C:\Users\Martin\Desktop\Racecar-Control-Firmware\main.asm(34): Including file 'C:\Users\Martin\Desktop\Racecar-Control-Firmware\command_table.inc'
C:\Users\Martin\Desktop\Racecar-Control-Firmware\main.asm(35): Including file 'C:\Users\Martin\Desktop\Racecar-Control-Firmware\macros.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m32def.inc'
C:\Users\Martin\Desktop\Racecar-Control-Firmware\main.asm(33): Including file 'C:\Users\Martin\Desktop\Racecar-Control-Firmware\ram_table.inc'
C:\Users\Martin\Desktop\Racecar-Control-Firmware\main.asm(34): Including file 'C:\Users\Martin\Desktop\Racecar-Control-Firmware\command_table.inc'
C:\Users\Martin\Desktop\Racecar-Control-Firmware\main.asm(35): Including file 'C:\Users\Martin\Desktop\Racecar-Control-Firmware\macros.inc'
                                 
                                 ; ###################################################################################################################################################
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32DEF_INC_
                                 #define _M32DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega32
                                 #pragma AVRPART ADMIN PART_NAME ATmega32
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write secion read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler bits
                                 .equ	TWPS1	= 1	; TWI Prescaler bits
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x085f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M32DEF_INC_ */
                                 
                                 
                                 ; Racecar Control Firmware
                                 ; Version 1.2.0
                                 ; 
                                 ; Sequential Flag Architecture
                                 
                                 ; ___________________________________________________________________________________________________________________________________________________
                                 ; >> VECTORS:
                                 
                                 .ORG	0x00																	; Reset Vector
000000 940c 0040                 	JMP		INIT																; ^
                                 
                                 .ORG 	0x02																	; INT0 Interrupt (PD2)
000002 940c 0299                 	JMP		INT0_HANDLER														; ^
                                 	 
                                 .ORG	0x04																	; INT1 Interrupt (PD3)
000004 940c 02a0                 	JMP 	INT1_HANDLER														; ^
                                 
                                 .ORG	0x14																	; TIMER1 Compare Match Interrupt
000014 940c 02a7                 	JMP		TMR1_HANDLER														; ^
                                 
                                 .ORG	0x20																	; ADC Conversion Complete Interrupt (PAO)
000020 940c 02ae                 	JMP		ADC_HANDLER															; ^
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> DEFINITIONS
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > INCLUDES
                                 
                                 .ORG	0x28
                                 
                                 	.INCLUDE	"ram_table.inc"													; Include RAM Table
                                 
                                 ; >> RAM TABLE
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > Variables [32B]
                                 
                                 .EQU	TACHOMETER_H					= 0x0060
                                 .EQU	TACHOMETER_L					= 0x0061
                                 
                                 .EQU	COMDATA_H						= 0x0062
                                 .EQU	COMDATA_L						= 0x0063
                                 
                                 .EQU	ADC_H							= 0x0064
                                 .EQU	ADC_L							= 0x0065
                                 
                                 .EQU	TEL_STEP						= 0x0066
                                 
                                 .EQU	RECENT_CMD						= 0x0067
                                 .EQU	RECENT_DAT						= 0x0068
                                 
                                 .EQU	DATA_H							= 0x0069
                                 .EQU	DATA_L							= 0x006A
                                 
                                 .EQU	SERIAL_RX						= 0x006B
                                 .EQU	SERIAL_TX						= 0x006C
                                 
                                 .EQU	DUTY_CYCLE						= 0x006D
                                 
                                 .EQU	FUNC_FLG						= 0x006E
                                 .EQU	MODE_FLG						= 0x006F
                                 
                                 .EQU	FINISHLINE						= 0x0070
                                 
                                 .EQU	MOVAVG_RECENT_XH				= 0x0071
                                 .EQU	MOVAVG_RECENT_XL				= 0x0072
                                 
                                 .EQU	ACCELEROMETER					= 0x0073
                                 
                                 .EQU	TURN_MIN_TACHOMETER_H			= 0x0074		; Old
                                 .EQU	TURN_MIN_TACHOMETER_L			= 0x0075		; ^
                                 
                                 .EQU	MAPPING_DEBOUNCE_H				= 0x0074
                                 .EQU	MAPPING_DEBOUNCE_L				= 0x0075
                                 
                                 .EQU	TACHOMETER_L_PREV				= 0x0076
                                 
                                 .EQU	TRACK_LENGTH_H					= 0x0078
                                 .EQU	TRACK_LENGTH_L					= 0x0079
                                 
                                 .EQU	LATEST_STRAIGHT_H				= 0x007A
                                 .EQU	LATEST_STRAIGHT_L				= 0x007B
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > Moving Average Filter [MOVAVG | 128B]
                                 
                                 .EQU	MOVAVG_TABLE					= 0x0100
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > Mapping [128B]
                                 
                                 .EQU	MAPP_TABLE						= 0x0200
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > Trajectory [1024B]
                                 
                                 .EQU	TRAJ_TABLE						= 0x0300
                                 
                                 	.INCLUDE	"command_table.inc"												; Include Command Table
                                 
                                 	;DW		0xTYP_00, 0										; Explanation
                                 	;  DW	  0x00_CMD, FUNC_ADDRESS						; ^
                                 
000028 0000
000029 0000                      	.DW		0x00_00, 0										; SoT
                                 
00002a aa00
00002b 0000                      	.DW		0xAA_00, 0										; >> GET
00002c 0003
00002d 0266                      	  .DW	  0x00_03, EMPTY									; DATA3
00002e 0012
00002f 0266                      	  .DW	  0x00_12, EMPTY									; VAR1
000030 0013
000031 0206                      	  .DW	  0x00_13, MAPPING_GET								; MAPP
                                 
000032 5500
000033 0000                      	.DW		0x55_00, 0										; >> SET
000034 0010
000035 0214                      	  .DW	  0x00_10, SET_MOTOR_PWM							; START
000036 0011
000037 0266                      	  .DW	  0x00_11, EMPTY									; STOP
000038 0012
000039 0266                      	  .DW	  0x00_12, EMPTY									; AUTO
00003a 0013
00003b 01fb                      	  .DW	  0x00_13, MAPPING_SET								; MAPP
00003c 0014
00003d 01f2                      	  .DW	  0x00_14, BROADCAST_SET							; BROD
                                 
00003e eeee                      	.INCLUDE	"macros.inc"													; Include Macros
00003f 0000                      
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> MACROS
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > SET FLAG
                                 
                                  .MACRO	SFLG
                                 
                                 	MOV		TEMP1, @0														; Clear Flag (@1) of Register (@0)
                                 	SBR		TEMP1, (1<<@1)													; ^
                                 	MOV		@0, TEMP1														; ^
                                 
                                 .ENDMACRO
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > CLEAR FLAG
                                 
                                  .MACRO	CFLG
                                 
                                 	MOV		TEMP1, @0														; Clear Flag (@1) of Register (@0)
                                 	CBR		TEMP1, (1<<@1)													; ^
                                 	MOV		@0, TEMP1														; ^
                                 
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > CONSTANTS
                                 
                                 	.EQU	BAUDRATE	= 0x00CF												; Baudrate configuration (default = 0xCF)
                                 
                                 	.EQU	TMR1FREQ	= 976 - 1												; Timer1 configuration
                                 
                                 																				; 62500 - 1		= 4Hz
                                 																				; 31250 - 1		= 8Hz
                                 																				; 15625 - 1		= 16Hz
                                 																				;  7812 - 1		= 32Hz
                                 																				;  1953 - 1		= 128Hz
                                 																				;   976 - 1		= 256Hz [DEFAULT]
                                 																				;   488 - 1		= 512Hz
                                 																				;	244 - 1		= 1024Hz
                                 																				;	122 - 1		= 2048Hz
                                 																				;	 61 - 1		= 4096Hz
                                 
                                 	; Moving Average Filter
                                 	
                                 	.EQU	MOVAVG_SIZE					= 64									; Size (bytes) of Moving Average Filter
                                 	.EQU	MOVAVG_DIVS					= 6										; Number of division to perform (i.e. 2^5 = 32)
                                 	.EQU	MOVAVG_TABLE_END			= MOVAVG_TABLE + MOVAVG_SIZE			;
                                 
                                 	; Mapping & Turn Detection Thresholds
                                 
                                 	.EQU	TURN_TH_IN_LEFT				= 122
                                 	.EQU	TURN_TH_IN_RIGHT			= 115
                                 	.EQU	TURN_TH_OUT_LEFT			= 122
                                 	.EQU	TURN_TH_OUT_RIGHT			= 115
                                 
                                 	.EQU	MAPPING_SEEK_PWM			= 58									; Mapping Seek PWM in BYTES (0-255)
                                 	.EQU	MAPPING_PWM					= 90									; Mapping PWM in BYTES (0-255)
                                 	.EQU	MAPPING_DEBOUNCE_VAL		= 10									; Mapping Debounce in TICKS
                                 	.EQU	MAPPING_OFFSET_IN			= 8										; Mapping Offset In in TICKS
                                 	.EQU	MAPPING_OFFSET_OUT			= 11									; Mapping Offset Out in TICKS
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > REGISTERS
                                 
                                 	.DEF	MDFLG		= R0													; Mode Flags
                                 	.DEF	FNFLG		= R1													; Function Flags for Interrupts
                                 	.DEF	MTFLG		= R2													; Mapping & Trajectory Flags
                                 	
                                 	.DEF	TEMP1		= R16													; Temporary Register #1
                                 	.DEF	TEMP2		= R17													; Temporary Register #2
                                 	.DEF	TEMP3		= R18													; Temporary Register #3
                                 	.DEF	TEMPI		= R19													; Temporary Interrupts Register
                                 	
                                 	.DEF	TEMPWH		= R25													; Temporary Register (Word) Pair
                                 	.DEF	TEMPWL		= R24													; ^
                                 		
                                 	.DEF	RXREG		= R20													; USART Reception Register
                                 	.DEF	TXREG		= R21													; USART Transmission Register
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > FLAGS
                                 
                                 	; MDFLG | Mode Flags 
                                 
                                 	.EQU	AUTO		= 7														; Autonomous Mode
                                 	.EQU	MAP			= 6														; Mapping Mode
                                 	.EQU	BROD2		= 5														; Broadcast Mode
                                 	.EQU	BROD1		= 4														; ^
                                 	.EQU	BROD0		= 3														; ^
                                 
                                 	; FNFLG | Function Flags
                                 
                                 	.EQU	TACHO		= 7														; Tachometer Ready
                                 	.EQU	FNLNE		= 6														; Finishline Ready
                                 	.EQU	ACCLR		= 5														; Accelerometer Ready
                                 	.EQU	TMR1		= 4														; Timer1 Ready
                                 	.EQU	CMDPD		= 3														; Command Pending
                                 
                                 	; MTFLG | Mapping & Trajectory Flags
                                 
                                 	.EQU	ISMAP		= 7														; Program currently mapping
                                 	.EQU	INTURN		= 6														; In turn
                                 	.EQU	TURNDIR		= 5														; Direction of turn (0 = L & 1 = R)
                                 	.EQU	TJRDY		= 4														; Trajectory ready
                                 
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> INITIALIZATION
                                 
                                 INIT:
                                 
                                 	; Stack Pointer
                                 
000040 e008                      	LDI 	TEMP1, HIGH(RAMEND)													; Initialize Stack Pointer
000041 bf0e                      	OUT 	SPH, TEMP1															; ^
000042 e50f                      	LDI 	TEMP1,  LOW(RAMEND)													; ^
000043 bf0d                      	OUT 	SPL, TEMP1															; ^
                                 
                                 	; SRAM Initialization
                                 
000044 2700                      	CLR		TEMP1																; Initialize allocated SRAM to NULL
000045 9300 0068                 	STS		RECENT_DAT, TEMP1													; ^
000047 9300 0066                 	STS		TEL_STEP, TEMP1														; ^
000049 9300 006f                 	STS		MODE_FLG, TEMP1														; ^
00004b 9300 006e                 	STS		FUNC_FLG, TEMP1														; ^
00004d 9300 0060                 	STS		TACHOMETER_H, TEMP1													; ^
00004f 9300 0061                 	STS		TACHOMETER_L, TEMP1													; ^
000051 9300 0076                 	STS		TACHOMETER_L_PREV, TEMP1											; ^
000053 9300 0074                 	STS		TURN_MIN_TACHOMETER_H, TEMP1										; ^
000055 9300 0075                 	STS		TURN_MIN_TACHOMETER_L, TEMP1										; ^
000057 9300 0073                 	STS		ACCELEROMETER, TEMP1												; ^
000059 9300 0064                 	STS		ADC_H, TEMP1														; ^
00005b 9300 0065                 	STS		ADC_L, TEMP1														; ^
00005d 9300 0070                 	STS		FINISHLINE, TEMP1
                                 
00005f 940e 0239                 	CALL	MOVAVG_POINTER_RESET												; Reset Moving Average pointer
000061 940e 023c                 	CALL	MOVAVG_SRAM_SETUP													; Initialize allocated Moving Average SRAM to default
                                 
                                 	; Flags Initialization
                                 
000063 2400                      	CLR		MDFLG																; Clear Flag Registers
000064 2411                      	CLR		FNFLG																; ^
000065 2422                      	CLR		MTFLG																; ^
                                 
                                 	; USART Config
                                 
000066 e000                      	LDI		TEMP1, HIGH(BAUDRATE)												; Set Transmission Rate
000067 bd00                      	OUT		UBRRH, TEMP1														; ^
000068 ec0f                      	LDI		TEMP1,  LOW(BAUDRATE)												; ^
000069 b909                      	OUT		UBRRL, TEMP1														; ^
                                 
00006a e002                      	LDI		TEMP1, 0x02															; Clear all Error Flags + Enable DoubleMode
00006b b90b                      	OUT		UCSRA, TEMP1														; ^
                                 
00006c e108                      	LDI		TEMP1, (1<<RXEN)|(1<<TXEN)											; Enable Transmission & Reception
00006d b90a                      	OUT		UCSRB, TEMP1														; ^
                                 
00006e e806                      	LDI		TEMP1, (1<<URSEL)|(3<<UCSZ0)										; Set Frame Format (8, N, 1)
00006f bd00                      	OUT		UCSRC, TEMP1														; ^
                                 
000070 2744                      	CLR		RXREG																; Reset Reception Register
000071 2755                      	CLR		TXREG																; Reset Transmission Register
                                 
                                 	; ADC Config	
                                 
000072 e200                      	LDI		TEMP1, (1<<ADLAR)													; Choose -> ADC0 and AVCC. Vcc = 5V
000073 b907                      	OUT		ADMUX, TEMP1														; AUTOTRIGGER ENABLED (ADATE) otherwise it doesnt work?
                                 
000074 e80f                      	LDI		TEMP1, (1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)			; ADEN: ENABLE ADC, ADSC: START CONVERSATION ; (1<<ADPS2)
000075 b906                      	OUT		ADCSRA, TEMP1														; ADFR: Activate Free Running Select, Prescaler: 128 // 125kHz ADC clock
                                 
000076 9a36                      	SBI		ADCSR, ADSC															; Start ADC Conversion	
                                 
                                 	; I/O (Port) Setup
                                 
000077 9a8c                      	SBI		DDRD, PD4															; Set PD4 on PORTD as Output
000078 9a8f                      	SBI		DDRD, PD7															; Set PD7 on PORTD as Output
000079 9a92                      	SBI		PORTD, PD2															; Set PD2 on PORTD as Pullup Input
                                 
00007a 9894                      	CBI		PORTD, PD4															; Disable MOSFET Brake
                                 
                                 	; Timer1 Setup
                                 
00007b e100                      	LDI		TEMP1, (1<<OCIE1A)													; Enable Timer1 Compare Match Interrupt
00007c bf09                      	OUT		TIMSK, TEMP1														; ^
                                 
00007d e000                      	LDI		TEMP1, 0x00															; Set Default
00007e bd0f                      	OUT		TCCR1A, TEMP1														; ^
                                 
00007f e00b                      	LDI		TEMP1, (1<<CS11)|(1<<CS10)|(1<<WGM12)								; Set 64 Prescelar, CTC-MODE
000080 bd0e                      	OUT		TCCR1B, TEMP1														; ^
                                 
000081 e003                      	LDI		TEMP1, HIGH(TMR1FREQ)												; Set timer offset
000082 bd0b                      	OUT		OCR1AH, TEMP1														; ^
000083 ec0f                      	LDI		TEMP1,  LOW(TMR1FREQ)												; ^
000084 bd0a                      	OUT		OCR1AL, TEMP1														; ^
                                 
000085 e004                      	LDI		TEMP1, (1<<TOV1)													; Enable Timer1
000086 bf08                      	OUT		TIFR, TEMP1															; ^
                                 	
                                 	; Waveform Generator (Timer2)
                                 
000087 e000                      	LDI		TEMP1, 0x00															; Reset Timer2
000088 bd03                      	OUT		OCR2, TEMP1															; ^
                                 
                                 	; External Interrupt Setup
                                 	
000089 e00f                      	LDI		TEMP1, (1<<ISC01)|(1<<ISC00) | (1<<ISC10)|(1<<ISC11)				; Set INT0 & INT1 to rising edge
00008a bf05                      	OUT		MCUCR, TEMP1														; ^
                                 
00008b ec00                      	LDI 	TEMP1, (1<<INT0)|(1<<INT1)											; Enable external interrupts
00008c bf0b                      	OUT 	GICR, TEMP1															; ^
                                 
00008d 9478                      	SEI																			; Set Global Interrupt Flag
                                 
00008e c000                      	RJMP	MAIN																; Start MAIN Program
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> MAIN PROGRAM
                                 
                                 MAIN:
                                 	
00008f 940e 0258                 	CALL	LOAD_FLAGS															; Load Flags
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > FUNCTIONS
                                 	
000091 940e 01b4                 	CALL	TELEGRAM_CHECK														; Check for Telegrams
                                 
000093 fc13                      	SBRC	FNFLG, CMDPD														; Command Pending
000094 940e 01ed                 	CALL	EXECUTE_COMMAND														; ^
                                 	
000096 fc17                      	SBRC	FNFLG, TACHO														; Tachometer Ready
000097 940e 00ab                 	CALL	LOG_TACHOMETER														; ^
                                 
000099 fc16                      	SBRC	FNFLG, FNLNE														; Finishline Ready
00009a 940e 00b8                 	CALL	LOG_FINISHLINE														; ^
                                 
00009c fc15                      	SBRC	FNFLG, ACCLR														; Accelerometer Ready
00009d 940e 00c3                 	CALL	LOG_ACCELEROMETER													; ^
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > MODES
                                 
00009f fc07                      	SBRC	MDFLG, AUTO															; Autonomous Mode
0000a0 0000                      	NOP																			; ^
                                 
0000a1 fc06                      	SBRC	MDFLG, MAP															; Mapping Mode
0000a2 940e 00d6                 	CALL	MAPPING																; ^
                                 
0000a4 fc03                      	SBRC	MDFLG, BROD0														; Broadcast Mode
0000a5 940e 017f                 	CALL	BROADCAST															; ^
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > CLOCK (TIMER1)
                                 
0000a7 fc14                      	SBRC	FNFLG, TMR1															; Timer1 Ready
0000a8 940e 0261                 	CALL	CLOCK																; ^
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > REPEAT LOOP
                                 
0000aa cfe4                      	RJMP	MAIN																; Loop forever
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> SENSOR PROCESSING & LOGGING
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > TACHOMETER
                                 
                                 LOG_TACHOMETER:
                                 	
                                 	// Tachometer value is not allowed to exceed 32.768
                                 	
0000ab 9190 0060                 	LDS		TEMPWH, TACHOMETER_H												; Load previous values from SRAM
0000ad 9180 0061                 	LDS		TEMPWL, TACHOMETER_L												; into WORD registers
                                 
0000af 9601                      	ADIW	TEMPWH:TEMPWL, 1													; Increment data
                                 
0000b0 9390 0060                 	STS		TACHOMETER_H, TEMPWH												; Store new values into SRAM
0000b2 9380 0061                 	STS		TACHOMETER_L, TEMPWL												; ^
                                 
0000b4 2d01
0000b5 770f
0000b6 2e10                      	CFLG	FNFLG, TACHO														; Clear TACHO flag in FNFLG
                                 
                                 	;MOV		TEMP1, FNFLG														; Clear TACHO Flag
                                 	;CBR		TEMP1, (1<<TACHO)													; ^
                                 	;MOV		FNFLG, TEMP1														; ^
                                 
0000b7 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > FINISH LINE
                                 
                                 LOG_FINISHLINE:
                                 	
0000b8 9100 0070                 	LDS		TEMP1, FINISHLINE													; Load, increment & store Finishline value
0000ba 9503                      	INC		TEMP1																; ^
0000bb 9300 0070                 	STS		FINISHLINE, TEMP1													; ^
                                 
0000bd fc06                      	SBRC	MDFLG, MAP	 														; Skip clearing flag if mapping mode enabled
0000be 9508                      	RET																			; ^
                                 
                                 	;MOV		TEMP1, FNFLG														; Clear FNLNE Flag
                                 	;CBR		TEMP1, (1<<FNLNE)													; ^
                                 	;MOV		FNFLG, TEMP1														; ^
                                 
0000bf 2d01
0000c0 7b0f
0000c1 2e10                      	CFLG	FNFLG, FNLNE														; Set FNLNE flag in FNFLG
                                 
0000c2 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > ACCELEROMETER
                                 
                                 LOG_ACCELEROMETER:
                                 
0000c3 fe14                      	SBRS	FNFLG, TMR1															; Check if logging is synchronized with CLOCK (Timer1)
0000c4 9508                      	RET
                                 
0000c5 b104                      	IN		TEMP1, ADCL															; Read LOW of ADC
0000c6 0000                      	NOP																			; ^
0000c7 9300 0065                 	STS		ADC_L, TEMP1														; ^
                                 
0000c9 b105                      	IN		TEMP1, ADCH															; Read HIGH of ADC
0000ca 0000                      	NOP																			; ^
0000cb 9300 0064                 	STS		ADC_H, TEMP1														; ^
                                 
0000cd 9300 0073                 	STS		ACCELEROMETER, TEMP1
                                 
0000cf 940e 022a                 	CALL	MOVAVG																; Apply Moving Average Filter
                                 
0000d1 9a36                      	SBI		ADCSR, ADSC															; Start ADC Conversion
                                 
0000d2 2d01
0000d3 7d0f
0000d4 2e10                      	CFLG	FNFLG, ACCLR														; Set ACCLR flag in FNFLG
                                 
                                 	;MOV		TEMP1, FNFLG														; Clear ACCLR Flag
                                 	;CBR		TEMP1, (1<<ACCLR)													; ^
                                 	;MOV		FNFLG, TEMP1														; ^
                                 
0000d5 9508                      	RET																			; Return
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> MAPPING
                                 
                                 MAPPING:
                                 	
0000d6 fc16                      	SBRC	FNFLG, FNLNE														; Check FNLNE flag
0000d7 c003                      	RJMP	MAPPING_ISMAP_CHECK													; If SET then check ISMAP
                                 
0000d8 fc27                      	SBRC	MTFLG, ISMAP														; Check ISMAP flag
0000d9 c037                      	RJMP	MAPPING_CHECK_DEBOUNCE												; If SET then continue mapping
                                 
0000da c076                      	RJMP	MAPPING_ESC															; Return
                                 
                                 MAPPING_ISMAP_CHECK:
                                 
                                 	// If  ISMAP -> CLR ISMAP(MTFLG) && CLR MAP(MDFLG)							= End Mapping
                                 	// If ~ISMAP -> SET ISMAP													= Begin Mapping
                                 	
                                 	;MOV		TEMP1, FNFLG														; Clear Finishline Flag
                                 	;CBR		TEMP1, (1<<FNLNE)													; ^
                                 	;MOV		FNFLG, TEMP1														; ^
                                 
0000db 2d01
0000dc 7b0f
0000dd 2e10                      	CFLG	FNFLG, FNLNE														; Set FNFNE flag in FNFLG
                                 	
0000de fc27                      	SBRC	MTFLG, ISMAP														; Check ISMAP flag
0000df c016                      	RJMP	MAPPING_END															; If SET then end mapping
                                 
0000e0 fe27                      	SBRS	MTFLG, ISMAP														; Check ISMAP flag
0000e1 c000                      	RJMP	MAPPING_BEGIN														; If CLR then begin mapping
                                 
                                 	
                                 MAPPING_BEGIN:
                                 
                                 	;MOV		TEMP1, MTFLG														; Set ISMAP Flag
                                 	;SBR		TEMP1, (1<<ISMAP)													; ^
                                 	;MOV		MTFLG, TEMP1														; ^
                                 
0000e2 2d02
0000e3 6800
0000e4 2e20                      	SFLG	MTFLG, ISMAP														; Set ISMAP flag in MTFLG
                                 
0000e5 2700                      	CLR		TEMP1																; Reset Tachometer
0000e6 9300 0060                 	STS		TACHOMETER_H, TEMP1													; ^
0000e8 9300 0061                 	STS		TACHOMETER_L, TEMP1													; ^
                                 
0000ea d032                      	RCALL	MAPPING_RESET_DEBOUNCE												; Reset Tachometer Debounce											
                                 
0000eb e50a                      	LDI		TEMP1, MAPPING_PWM													; Start vehicle with mapping PWM
0000ec 9300 0068                 	STS		RECENT_DAT, TEMP1													; ^	
0000ee 940e 0214                 	CALL	SET_MOTOR_PWM														; ^
                                 
0000f0 e0d2                      	LDI		YH, HIGH(MAPP_TABLE)												; Initialize Y Pointer
0000f1 e0c0                      	LDI		YL,  LOW(MAPP_TABLE)												; ^
                                 
0000f2 2700                      	CLR		TEMP1																; Store 0x0000 into mapping in SRAM
0000f3 9309                      	ST		Y+, TEMP1															; ^
0000f4 9309                      	ST		Y+, TEMP1															; ^
                                 
0000f5 c05b                      	RJMP	MAPPING_ESC															; Return
                                 
                                 MAPPING_END:
                                 	
                                 	;MOV		TEMP1, MDFLG														; Clear MAP flag
                                 	;CBR		TEMP1, (1<<MAP)														; ^
                                 	;MOV		MDFLG, TEMP1														; ^
                                 
0000f6 2d00
0000f7 7b0f
0000f8 2e00                      	CFLG	MDFLG, MAP															; Clear MAP flag in MDFLG
0000f9 9200 006f                 	STS		MODE_FLG, MDFLG														; Store new mode flags to SRAM
                                 
                                 	;MOV		TEMP1, MTFLG														; Clear ISMAP Flag
                                 	;CBR		TEMP1, (1<<ISMAP)													; ^
                                 	;MOV		MTFLG, TEMP1														; ^
                                 
0000fb 2d02
0000fc 770f
0000fd 2e20                      	CFLG	MTFLG, ISMAP														; Clear ISMAP flag in MTFLG
                                 
0000fe 9110 0060                 	LDS		TEMP2, TACHOMETER_H													; Load current Tachometer values
000100 9120 0061                 	LDS		TEMP3, TACHOMETER_L													; ^
                                 
000102 9310 0078                 	STS		TRACK_LENGTH_H, TEMP2 												; Store Track Length (Finishline Tachometer value) into SRAM
000104 9320 0079                 	STS		TRACK_LENGTH_L, TEMP3 												; ^
                                 
                                 	;ST		Y+, TEMP2															; Save finishline tachometer data
                                 	;ST		Y+, TEMP3															;
                                 
000106 2700                      	CLR		TEMP1																; Reset Tachometer
000107 9300 0060                 	STS		TACHOMETER_H, TEMP1													; ^
000109 9300 0061                 	STS		TACHOMETER_L, TEMP1													; ^
                                 
00010b ef0f                      	SER		TEMP1																; Store 0xFFFF into mapping in SRAM
00010c 9309                      	ST		Y+, TEMP1															; ^
00010d 8308                      	ST		Y, TEMP1															; ^
                                 
00010e 940e 0221                 	CALL	SET_MOTOR_BREAK														; Break vehicle
                                 
000110 c040                      	RJMP	MAPPING_ESC															; Return
                                 
                                 MAPPING_CHECK_DEBOUNCE:
                                 	
000111 9190 0060                 	LDS		TEMPWH, TACHOMETER_H												; Load current Tachometer value
000113 9180 0061                 	LDS		TEMPWL, TACHOMETER_L												; ^
                                 
000115 9110 0074                 	LDS		TEMP2, MAPPING_DEBOUNCE_H											; Load Debounce Tachometer value
000117 9120 0075                 	LDS		TEMP3, MAPPING_DEBOUNCE_L											; ^
                                 
000119 1782                      	CP		TEMPWL, TEMP3														; Check if debounce is reached
00011a 0791                      	CPC		TEMPWH, TEMP2 														; ^
00011b f1a8                      	BRLO	MAPPING_ESC															; Escape if FALSE
00011c c00a                      	RJMP	MAPPING_CHECK_TURN													; Continue if TRUE
                                 
                                 MAPPING_RESET_DEBOUNCE:
                                 
00011d 9190 0060                 	LDS		TEMPWH, TACHOMETER_H												; Load current Tachometer value
00011f 9180 0061                 	LDS		TEMPWL, TACHOMETER_L												; ^
                                 	
000121 960a                      	ADIW	TEMPWH:TEMPWL, MAPPING_DEBOUNCE_VAL									; Update Minumum Tachometer Detection value (current Tachometer + Constant)
                                 
000122 9390 0074                 	STS		MAPPING_DEBOUNCE_H, TEMPWH											; Store values to SRAM
000124 9380 0075                 	STS		MAPPING_DEBOUNCE_L, TEMPWL											; ^
                                 
000126 9508                      	RET																			; Return
                                 
                                 MAPPING_CHECK_TURN:
                                 
000127 9110 0073                 	LDS		TEMP2, ACCELEROMETER												; Load Accelerometer value
                                 
000129 fc26                      	SBRC	MTFLG, INTURN														; Check INTURN flag
00012a c00c                      	RJMP	MAPPING_CHECK_TURN_OUT												; If SET then check if a turn has been exited
00012b c000                      	RJMP	MAPPING_CHECK_TURN_IN												; If CLR then check if a turn has been detected
                                 
                                 MAPPING_CHECK_TURN_IN:
                                 
                                 	; Check Right Turn
                                 	
                                 	;MOV		TEMP1, MTFLG														; Set TURNDIR Flag (checking right turn)
                                 	;SBR		TEMP1, (1<<TURNDIR)													; ^
                                 	;MOV		MTFLG, TEMP1														; ^
                                 
00012c 2d02
00012d 6200
00012e 2e20                      	SFLG	MTFLG, TURNDIR														; Set TURNDIR flag in MTFLG
                                 
00012f 3713                      	CPI		TEMP2, TURN_TH_IN_RIGHT												; Check Right Turn In
000130 f078                      	BRLO	MAPPING_ADD															; Create mapping entry if true
                                 
                                 	; Check Left Turn
                                 
                                 	;MOV		TEMP1, MTFLG														; Clear TURNDIR Flag (checking left turn)
                                 	;CBR		TEMP1, (1<<TURNDIR)													; ^
                                 	;MOV		MTFLG, TEMP1														; ^
                                 
000131 2d02
000132 7d0f
000133 2e20                      	CFLG	MTFLG, TURNDIR														; Clear TURNDIR flag in MTFLG
                                 
000134 371a                      	CPI		TEMP2, TURN_TH_IN_LEFT												; Check Left Turn In
000135 f450                      	BRSH	MAPPING_ADD															; Create mapping entry if true
                                 
000136 c01a                      	RJMP	MAPPING_ESC															; Return
                                 
                                 MAPPING_CHECK_TURN_OUT:
                                 
000137 fc25                      	SBRC	MTFLG, TURNDIR														; Check TURNDIR flag
000138 c001                      	RJMP	MAPPING_CHECK_TURN_OUT_RIGHT										; If SET then check RIGHT turn out
000139 c003                      	RJMP	MAPPING_CHECK_TURN_OUT_LEFT											; If CLR then check LEFT turn out
                                 
                                 MAPPING_CHECK_TURN_OUT_RIGHT:
                                 
00013a 3713                      	CPI		TEMP2, TURN_TH_OUT_RIGHT											; Check Right Turn Out
00013b f420                      	BRSH	MAPPING_ADD															; Create mapping entry if true
                                 
00013c c014                      	RJMP	MAPPING_ESC															; Return
                                 
                                 MAPPING_CHECK_TURN_OUT_LEFT:
                                 
00013d 371a                      	CPI		TEMP2, TURN_TH_OUT_LEFT												; Check Left Turn Out
00013e f008                      	BRLO	MAPPING_ADD															; Create mapping entry if true
                                 
00013f c011                      	RJMP	MAPPING_ESC															; Return
                                 
                                 MAPPING_ADD:
                                 
000140 2d02                      	MOV		TEMP1, MTFLG														; Toggle INTURN flag
000141 e410                      	LDI		TEMP2, (1<<INTURN)													; ^
000142 2701                      	EOR		TEMP1, TEMP2														; ^
000143 2e20                      	MOV		MTFLG, TEMP1														; ^
                                 
000144 dfd8                      	RCALL	MAPPING_RESET_DEBOUNCE												; Reset Tachometer Debounce
                                 
000145 9190 0060                 	LDS		TEMPWH, TACHOMETER_H												; Load current Tachometer values
000147 9180 0061                 	LDS		TEMPWL, TACHOMETER_L												; ^
                                 
000149 fc26                      	SBRC	MTFLG, INTURN														; 
00014a 9708                      	SBIW	TEMPWH:TEMPWL, MAPPING_OFFSET_IN									;
00014b fe26                      	SBRS	MTFLG, INTURN														;
00014c 970b                      	SBIW	TEMPWH:TEMPWL, MAPPING_OFFSET_OUT									;
                                 
                                 	// Tachometer value is not allowed to exceed 32.768
                                 
00014d fd06                      	SBRC	TEMP1, INTURN														; Set MSB of Tachometer (HIGH) to value of INTURN bit
00014e 6890                      	ORI		TEMPWH, (1<<7)														; ^
                                 	
00014f 9399                      	ST		Y+, TEMPWH															; Store mapping into SRAM
000150 9389                      	ST		Y+, TEMPWL															; ^
                                 
                                 MAPPING_ESC:
                                 
000151 9508                      	RET																			; Return
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> TRAJECTORY
                                 
                                 TRAJECTORY:
                                 	
                                 	// BRANCH ACCORDING TO TJRDY FLAG
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > COMPILER
                                 
                                 TRAJECTORY_COMPILER_SETUP:
                                 
000152 e0b3                      	LDI		XH, HIGH(TRAJ_TABLE)												; Load Trajectory Table
000153 e0a0                      	LDI		XL, LOW(TRAJ_TABLE)													;
                                 
000154 e0d2                      	LDI		YH, HIGH(MAPP_TABLE)												; Load Mapping Table
000155 e0c0                      	LDI		YL, LOW(MAPP_TABLE)													; 
                                 	
000156 e020                      	LDI		TEMP3, 0															; Check for FinishLine
                                 
000157 9109                      	LD		TEMP1, Y+															; ^
000158 9119                      	LD		TEMP2, Y+															; 
                                 
000159 1702                      	CP		TEMP1, TEMP3														; ^
00015a 0712                      	CPC		TEMP2, TEMP3														; 
                                 
00015b ef2f                      	SER		TEMP3
                                 
00015c f059                      	BREQ	TRAJECTORY_COMPILER_RUNUP											; Branch if FinishLine 00_00
                                 
00015d 9508                      	RET
                                 
                                 TRAJECTORY_COMPILER_LOOP:
                                 
00015e 9109                      	LD		TEMP1, Y+															;
00015f 9119                      	LD		TEMP2, Y+															;
                                 
000160 ef2f                      	LDI		TEMP3, 0xFF															;
                                 
000161 1702                      	CP		TEMP1, TEMP3														; Check EOT
000162 f411                      	BRNE	NOT_EOT																; 
000163 0712                      	CPC		TEMP2, TEMP3														; 
000164 f401                      	BRNE	NOT_EOT																;
                                 	
                                 	//DO SOMETHING HERE!!!!!!! 
                                 
                                 NOT_EOT:
                                 	
000165 ff07                      	SBRS	TEMP1, 7															; CHECK HIGHBIT TACHO FOR BREAK OR ACCELEROMETER
000166 c001                      	RJMP	TRAJECTORY_COMPILER_ACCELERATE
000167 c000                      	RJMP	TRAJECTORY_COMPILER_BREAK
                                 
                                 
                                 TRAJECTORY_COMPILER_BREAK:
                                 
                                 
                                 TRAJECTORY_COMPILER_ACCELERATE:
                                 
                                 
                                 
                                 TRAJECTORY_COMPILER_RUNUP:
                                 
000168 9109                      	LD		TEMP1, Y+															; Load Mapping Table TachoH & L
000169 9119                      	LD		TEMP2, Y+															; ^
                                 
00016a 1702                      	CP		TEMP1, TEMP3														; Check for 0xFF_FF
00016b f7e1                      	BRNE	TRAJECTORY_COMPILER_RUNUP											; ^
00016c 0712                      	CPC		TEMP2, TEMP3														; ^
00016d f7d1                      	BRNE	TRAJECTORY_COMPILER_RUNUP											; ^
                                 
00016e 9724                      	SBIW	Y, 4																; Offset the mapping with 4, must be last OutSwing
                                 
00016f 9109                      	LD		TEMP1, Y+															; Load Last Swing
000170 9119                      	LD		TEMP2, Y+															; 	
                                 
000171 930d                      	ST		X+, TEMP1															; Save Last Swing for Run_Up
000172 931d                      	ST		X+, TEMP2															;
                                 
000173 9190 0078                 	LDS		TEMPWH, TRACK_LENGTH_H 												; Load_Circuit_Length
000175 9180 0079                 	LDS		TEMPWL, TRACK_LENGTH_L												;
                                 
000177 1b81                      	SUB		TEMPWL, TEMP2														; Subtract Total circuit length with Last Swing value
000178 0b90                      	SBC		TEMPWH, TEMP1														; 
                                 
000179 9390 007a                 	STS		LATEST_STRAIGHT_H, TEMPWH											; NOW IT IS LOADED GO BACK TO GENERATOR!!!
00017b 9380 007b                 	STS		LATEST_STRAIGHT_L, TEMPWL											;
                                 
00017d cfe0                      	RJMP	TRAJECTORY_COMPILER_LOOP
                                 
                                 
                                 TRAJECTORY_COMPILER_FIND_END:
                                 
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > RUN
                                 
                                 	// Placeholder
                                 	// ...
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 
                                 TRAJECTORY_ESC:
                                 
00017e 9508                      	RET																			; Return
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> AUTONOMOUS MODE
                                 
                                 	// Placeholder
                                 	// ...
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> BROADCAST
                                 
                                 BROADCAST:
                                 	
00017f fe14                      	SBRS	FNFLG, TMR1															; Check if broadcast is synchronized with CLOCK (Timer1)
000180 9508                      	RET																			; ^
                                 	
000181 e300                      	LDI		TEMP1, (1<<BROD2)|(1<<BROD1)										; Mask Broadcast Modes
000182 2100                      	AND		TEMP1, MDFLG														; ^
                                 
000183 3100                      	CPI		TEMP1, (1<<BROD1)													; Tachometer Mode		= (011)
000184 f031                      	BREQ	BROADCAST_TACHOMETER												; ^
                                 	
000185 3300                      	CPI		TEMP1, (1<<BROD2)|(1<<BROD1)										; Finishline Mode		= (111)
000186 f091                      	BREQ	BROADCAST_FINISHLINE												; ^
                                 
000187 3200                      	CPI		TEMP1, (1<<BROD2)													; Accelerometer Mode	= (101)
000188 f059                      	BREQ	BROADCAST_ACCELEROMETER												; ^
                                 
000189 d014                      	RCALL	BROADCAST_ALL														; Broadcast All			= (001)
                                 
00018a 9508                      	RET																			; Return
                                 
                                 BROADCAST_TACHOMETER:
                                 
00018b 9150 0060                 	LDS		TXREG, TACHOMETER_H													; Load & transmit HIGH byte of Tachometer data
00018d 940e 01b0                 	CALL	SERIAL_WRITE														; ^
                                 
00018f 9150 0061                 	LDS		TXREG, TACHOMETER_L													; Load & transmit HIGH byte of Tachometer data
000191 940e 01b0                 	CALL	SERIAL_WRITE														; ^
                                 
000193 9508                      	RET																			; Return
                                 
                                 BROADCAST_ACCELEROMETER:
                                 
000194 9150 0073                 	LDS		TXREG, ACCELEROMETER												; Load & transmit Accelerometer data
000196 940e 01b0                 	CALL	SERIAL_WRITE														; ^
                                 
000198 9508                      	RET																			; Return
                                 
                                 BROADCAST_FINISHLINE:
                                 	
000199 9150 0070                 	LDS		TXREG, FINISHLINE													; Load & transmit Finishline data
00019b 940e 01b0                 	CALL	SERIAL_WRITE														; ^
                                 
00019d 9508                      	RET																			; Return
                                 
                                 BROADCAST_ALL:
                                 
00019e 9100 0061                 	LDS		TEMP1, TACHOMETER_L													; Load current & recent Tachometer (LOW) value
0001a0 9110 0076                 	LDS		TEMP2, TACHOMETER_L_PREV											;
                                 
0001a2 1701                      	CP		TEMP1, TEMP2														; Compare and only transmit if value has changed
0001a3 f409                      	BRNE	BROADCAST_ALL_SEND													; ^
                                 
0001a4 9508                      	RET																			; Return
                                 
                                 BROADCAST_ALL_SEND:
                                 
0001a5 9300 0076                 	STS		TACHOMETER_L_PREV, TEMP1											; Update recent Tachometer (LOW) value
                                 
0001a7 dfe3                      	RCALL	BROADCAST_TACHOMETER												; Broadcast Tachometer
0001a8 dfeb                      	RCALL	BROADCAST_ACCELEROMETER												; Broadcast Accelerometer
                                 
0001a9 9508                      	RET																			; Return
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> COMMUNICATION PROTOCOL
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > USART
                                 
                                 SERIAL_READ:
                                 	
0001aa 9b5f                      	SBIS	UCSRA, RXC															; Wait for Recieve (RXC) Flag
0001ab cffe                      	RJMP	SERIAL_READ															; ^
                                 
0001ac b14c                      	IN		RXREG, UDR															; Read data into Reception Register
0001ad 9340 006b                 	STS		SERIAL_RX, RXREG													; Store data in SRAM
                                 
0001af 9508                      	RET																			; Return
                                 
                                 SERIAL_WRITE:
                                 	
0001b0 9b5d                      	SBIS	UCSRA, UDRE															; Wait for Empty Transmit Buffer (UDRE) Flag
0001b1 cffe                      	RJMP	SERIAL_WRITE														; ^
                                 
0001b2 b95c                      	OUT		UDR, TXREG															; Write data from Transmission Register
                                 
0001b3 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > TELEGRAM PARSER
                                 
                                 	// !#!#!#!
                                 	// Needs to be changed to support recent Z pointer from SRAM!
                                 
                                 TELEGRAM_CHECK:
                                 
0001b4 9b5f                      	SBIS	UCSRA, RXC															; Return if no data in USART reception buffer
0001b5 9508                      	RET																			; ^
                                 
0001b6 b14c                      	IN		RXREG, UDR															; Read data into Reception Register
0001b7 9340 006b                 	STS		SERIAL_RX, RXREG													; Store data in SRAM
                                 
                                 TELEGRAM_PARSER:
                                 	
0001b9 9100 0066                 	LDS		TEMP1, TEL_STEP														; Load, increment & store Telegram Step Counter
0001bb 9503                      	INC		TEMP1																; ^
0001bc 9300 0066                 	STS		TEL_STEP, TEMP1														; ^
                                 
0001be 3001                      	CPI		TEMP1, 1															; Setup Telegram Parser if Step = 1
0001bf f041                      	BREQ	TELEGRAM_PARSE_SETUP												; ^
                                 
0001c0 3004                      	CPI		TEMP1, 4															; Execute Telegram if Step = 4
0001c1 f089                      	BREQ	TELEGRAM_EXECUTE													; ^
                                 
0001c2 3002                      	CPI		TEMP1, 2															; Parse (TYPE) if Step = 2
0001c3 f041                      	BREQ	TELEGRAM_JUMP														; ^
                                 
0001c4 95ea                      	DEC		ZL																	; Offset Z pointer (-1) to parse TYPE (0x00_XX)
                                 
0001c5 3003                      	CPI		TEMP1, 3															; Parse (COMMAND) if Step = 3
0001c6 f029                      	BREQ	TELEGRAM_JUMP														; ^
                                 
                                 TELEGRAM_PARSER_ESC:
                                 	
0001c7 9508                      	RET
                                 
                                 TELEGRAM_PARSE_SETUP:
                                 
0001c8 e0f0                      	LDI		ZH, HIGH(COMMANDS*2)												; Reset Z Pointer to COMMANDS jump table
0001c9 e5e0                      	LDI 	ZL,  LOW(COMMANDS*2)												; ^
                                 
0001ca 95e3                      	INC		ZL																	; Offset Z pointer (+1) to parse COMMAND (0xXX_00)
                                 
0001cb cfed                      	RJMP	TELEGRAM_PARSER														; Return
                                 
                                 TELEGRAM_JUMP:
                                 
0001cc 9634                      	ADIW	ZH:ZL, 4															; Increment Z Pointer (by 4)
                                 
0001cd 9104                      	LPM		TEMP1, Z															; Load the matching duty cycle
                                 
0001ce 3e0e                      	CPI		TEMP1, 0xEE															; Reset everything if out of table bounds
0001cf f0b1                      	BREQ	TELEGRAM_ERROR														; ^
                                 
0001d0 1704                      	CP		TEMP1, RXREG														; Find match in jump table
0001d1 f3a9                      	BREQ	TELEGRAM_PARSER_ESC													; ^
                                 
0001d2 cff9                      	RJMP	TELEGRAM_JUMP														; Repeat
                                 
                                 TELEGRAM_EXECUTE:
                                 
0001d3 9632                      	ADIW	ZH:ZL, 2															; Point at & read LOW of Table address
0001d4 9104                      	LPM		TEMP1, Z															; ^
                                 
0001d5 9631                      	ADIW	ZH:ZL, 1															; Point at & read HIGH of Table address
0001d6 9114                      	LPM		TEMP2, Z															; ^
                                 
0001d7 2fe0                      	MOV		ZL, TEMP1															; Load Z Pointer
0001d8 2ff1                      	MOV		ZH, TEMP2															; ^
                                 
0001d9 9340 0068                 	STS		RECENT_DAT, RXREG													; Store recieved data in SRAM
                                 
                                 	;MOV		TEMP1, FNFLG														; Set CMDPD flag
                                 	;SBR		TEMP1, (1<<CMDPD)													; ^
                                 	;MOV		FNFLG, TEMP1														; ^
                                 
0001db 2d01
0001dc 6008
0001dd 2e10                      	SFLG	FNFLG, CMDPD														; Set CMDPD flag in FNFLG
                                 
                                 TELEGRAM_RESET:
                                 	
0001de 2700                      	CLR		TEMP1																; Reset & store parse step counter
0001df 9300 0066                 	STS		TEL_STEP, TEMP1														; ^
                                 
0001e1 9508                      	RET																			; Return
                                 
                                 TELEGRAM_CLRBUFFER:
                                 
0001e2 b10c                      	IN		TEMP1, UDR															; Empty buffer
0001e3 995f                      	SBIC	UCSRA, RXC															; ^
0001e4 cffd                      	RJMP	TELEGRAM_CLRBUFFER													; ^
                                 
0001e5 9508                      	RET																			; Return
                                 
                                 TELEGRAM_ERROR:
                                 
0001e6 2744                      	CLR		RXREG																; Clear reception register
                                 
                                 	;MOV		TEMP1, FNFLG														; Clear CMDPD flag
                                 	;CBR		TEMP1, (1<<CMDPD)													; ^
                                 	;MOV		FNFLG, TEMP1														; ^
                                 
0001e7 2d01
0001e8 7f07
0001e9 2e10                      	CFLG	FNFLG, CMDPD														; Clear CMDPD flag in FNFLG
                                 
0001ea dff3                      	RCALL	TELEGRAM_RESET														; Reset parse step counter
0001eb dff6                      	RCALL	TELEGRAM_CLRBUFFER													; Clear reception buffer
                                 	
0001ec 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > COMMANDS
                                 
                                 EXECUTE_COMMAND:
                                 	
                                 	;MOV		TEMP1, FNFLG														; Clear CMDPD flag
                                 	;CBR		TEMP1, (1<<CMDPD)													; ^
                                 	;MOV		FNFLG, TEMP1														; ^
                                 
0001ed 2d01
0001ee 7f07
0001ef 2e10                      	CFLG	FNFLG, CMDPD														; Clear CMDPD flag in FNFLG
                                 
0001f0 9509                      	ICALL																		; Call function (address) of Z-pointer
                                 
0001f1 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 
                                 BROADCAST_SET:
                                 
0001f2 2d00                      	MOV		TEMP1, MDFLG														; Load & reset current Broadcast Flags in Mode Register
0001f3 7c07                      	ANDI	TEMP1, 0b11000111													; ^
                                 
0001f4 9110 0068                 	LDS		TEMP2, RECENT_DAT													; Load & apply recieved Broadcast Flags
0001f6 2b01                      	OR		TEMP1, TEMP2														; ^
                                 
0001f7 2e00                      	MOV		MDFLG, TEMP1														; Save new mode flags
0001f8 9200 006f                 	STS		MODE_FLG, MDFLG														; Store new mode flags to SRAM
                                 
0001fa 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 
                                 MAPPING_SET:
                                 
0001fb 2d00
0001fc 6400
0001fd 2e00                      	SFLG	MDFLG, MAP															; Set MAP flag in MDFLG
                                 
0001fe 9200 006f                 	STS		MODE_FLG, MDFLG														; Store new mode flags to SRAM
                                 
000200 e30a                      	LDI		TEMP1, MAPPING_SEEK_PWM												; Start vehicle with mapping seek PWM
000201 9300 0068                 	STS		RECENT_DAT, TEMP1													; ^	
000203 940e 0214                 	CALL	SET_MOTOR_PWM														; ^
                                 
000205 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 
                                 MAPPING_GET:
                                 
                                 	// If MAPP > 512 bytes, then buffer will overflow in MatLab
                                 	
000206 e0d2                      	LDI		YH, HIGH(MAPP_TABLE)												; Initialize Y Pointer
000207 e0c0                      	LDI		YL,  LOW(MAPP_TABLE)												; ^
                                 
                                 MAPPING_GET_LOOP:
                                 
000208 9109                      	LD		TEMP1, Y+															; Load mapping values (HIGH & LOW)
000209 9119                      	LD		TEMP2, Y+															; ^
                                 
00020a 2f50                      	MOV		TXREG, TEMP1														; Transmit HIGH byte of mapping
00020b 940e 01b0                 	CALL	SERIAL_WRITE														; ^
                                 
00020d 2f51                      	MOV		TXREG, TEMP2														; Transmit LOW byte of mapping
00020e 940e 01b0                 	CALL	SERIAL_WRITE														; ^
                                 
000210 3f0f                      	CPI		TEMP1, 0xFF															; Escape if EoT has been reached
000211 f009                      	BREQ	MAPPING_GET_ESC														; ^
                                 
000212 cff5                      	RJMP	MAPPING_GET_LOOP													; Loop
                                 
                                 MAPPING_GET_ESC:
                                 
000213 9508                      	RET																			; Return
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> DEVICE (RACECAR) CONTROL
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > MOTOR CONTROL
                                 
                                 SET_MOTOR_PWM:
                                 
000214 e60a                      	LDI		TEMP1, 0x6A															; Initialize Waveform Generator (Timer2) (0110_1010)
000215 bd05                      	OUT		TCCR2, TEMP1														; ^
                                 
000216 9120 0068                 	LDS		TEMP3, RECENT_DAT													; Load recent recieved telegram data from SRAM
000218 9320 006d                 	STS		DUTY_CYCLE, TEMP3													; Store loaded Duty Cycle in SRAM
                                 	
00021a 2322                      	TST		TEMP3																; Check if recieved Duty Cycle is 0
00021b f029                      	BREQ	SET_MOTOR_BREAK														; Break vehicle if true
                                 
00021c 9894                      	CBI		PORTD, PD4															; Disable MOSFET Brake
                                 
00021d 940e 0292                 	CALL	DELAY_100uS															; Wait for 100 ?s
                                 
00021f bd23                      	OUT		OCR2, TEMP3															; Set Duty Cycle (PWM) (0-255) on Timer2
                                 
                                 SET_MOTOR_PWM_ESC:
                                 
000220 9508                      	RET																			; Return
                                 
                                 SET_MOTOR_BREAK:
                                 
000221 e000                      	LDI		TEMP1, 0x00															; Disable Timer2 (PWM)
000222 bd05                      	OUT		TCCR2, TEMP1														; ^
                                 
000223 9897                      	CBI 	PORTD, PD7															; Clear PD7 of PORTD
                                 		
000224 940e 0292                 	CALL	DELAY_100uS															; Wait for 100 us
                                 
000226 9a94                      	SBI		PORTD, PD4															; Enable MOSFET Brake
                                 
000227 cff8                      	RJMP	SET_MOTOR_PWM_ESC													; Return
                                 
                                 SET_MOTOR_MAX:
                                 
000228 9a97                      	SBI 	PORTD, PD7															; Set PD7 of PORTD
000229 cff6                      	RJMP	SET_MOTOR_PWM_ESC													; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > MOVING AVERAGE
                                 
                                 	// !#!#!#!
                                 	// Needs to be changed to support an arbitrary SRAM Location!
                                 
                                 MOVAVG:
                                 
00022a 91b0 0071                 	LDS		XH, MOVAVG_RECENT_XH												; Load recent MOVAVG X pointer
00022c 91a0 0072                 	LDS		XL, MOVAVG_RECENT_XL												; ^
                                 
00022e 9100 0064                 	LDS		TEMP1, ADC_H														; Insert ADC_val from high because of ADLAR
000230 930d                      	ST		X+, TEMP1															; Save ADC_H to SRAM pointer X
                                 
000231 34a0                      	CPI		XL, MOVAVG_SIZE														;
                                 	//CPI		XL, LOW(MOVAVG_TABLE_END)										; Check if Pointer should be reset
000232 f409                      	BRNE	MOVAVG_SKIP_RESET													; ^
                                 	//CPI		XH, HIGH(MOVAVG_TABLE_END)										; Check if Pointer should be reset
                                 	//BRNE	MOVAVG_SKIP_RESET													; ^
000233 d005                      	RCALL	MOVAVG_POINTER_RESET												; ^
                                 
                                 MOVAVG_SKIP_RESET:
                                 	
                                 	//STS		MOVAVG_RECENT_XH, XH												; - skal med
000234 93a0 0072                 	STS		MOVAVG_RECENT_XL, XL												; -
                                 
000236 d00e                      	RCALL	MOVAVG_ADD															; Do Moving Average Addition
000237 d018                      	RCALL	MOVAVG_DIVIDE														; Do Moving Average Division
                                 
000238 9508                      	RET																			; Return
                                 
                                 MOVAVG_POINTER_RESET:
                                 
000239 e0b1                      	LDI		XH, HIGH(MOVAVG_TABLE)												; Load reset values into X Pointer
00023a e0a0                      	LDI		XL,  LOW(MOVAVG_TABLE)												; ^
                                 
00023b 9508                      	RET																			; Return
                                 
                                 MOVAVG_SRAM_SETUP:
                                 
00023c e400                      	LDI		TEMP1, MOVAVG_SIZE													; Load size of Moving Average filter into register
                                 
00023d 93b0 0071                 	STS		MOVAVG_RECENT_XH, XH												; Store location of X pointer into SRAM
00023f 93a0 0072                 	STS		MOVAVG_RECENT_XL, XL												; ^
                                 
                                 MOVAVG_SRAM_SETUP_LOOP:
                                 	
000241 930d                      	ST		X+, TEMP1															; Set all values of SRAM to default value
                                 
000242 34a0                      	CPI		XL, LOW(MOVAVG_TABLE_END)											; Check if reached end of table.
000243 f7e9                      	BRNE	MOVAVG_SRAM_SETUP_LOOP												; ^
                                 	//CPI	XH, HIGH(MOVAVG_TABLE_END)						16BIT COMPARE!! CPC	; Check if reached end of table.
                                 	//BRNE	MOVAVG_SRAM_SETUP_LOOP												; ^
                                 
000244 9508                      	RET																			; Return
                                 
                                 MOVAVG_ADD:
                                 	
000245 2700                      	CLR		TEMP1																; Reset Temporary Register
000246 2711                      	CLR		TEMP2																; ^
000247 2722                      	CLR		TEMP3																; ^
                                 
000248 dff0                      	RCALL	MOVAVG_POINTER_RESET												; Reset X Pointer
                                 
                                 MOVAVG_ADD_LOOP:
                                 	
000249 910d                      	LD		TEMP1, X+ 															; Load value from X pointer location.
00024a 0f10                      	ADD		TEMP2, TEMP1														; Add values
                                 
                                 	// Can be changed to SBIC, SREG ..
                                 	
                                 	//SBRC	SREG, 0
00024b f408                      	BRCC	MOVAVG_ADD_SKIP_CARRY												; Branch if carry is not set - skal slettes
00024c 9523                      	INC		TEMP3																; ^
                                 
                                 MOVAVG_ADD_SKIP_CARRY:															;skal slettes!
                                 	
00024d 34a0                      	CPI		XL, LOW(MOVAVG_TABLE_END)											; Check if reached end of table
00024e f7d1                      	BRNE	MOVAVG_ADD_LOOP														; 
                                 	//CPI		XH, HIGH(MOVAVG_TABLE_END) THIS IS WRONG SHOULD BE CPC 16bit if ever moved!
                                 	//BRNE	MOVAVG_ADD_LOOP
                                 
00024f 9508                      	RET																			; Return
                                 
                                 MOVAVG_DIVIDE:
                                 
000250 e006                      	LDI		TEMP1, MOVAVG_DIVS													; Load number of Divisions
                                 
                                 MOVAVG_DIVIDE_LOOP:
                                 
000251 9525                      	ASR		TEMP3																; TEMP3 IS HIGH
000252 9517                      	ROR		TEMP2																; TEMP2 IS LOW
                                 
000253 950a                      	DEC		TEMP1																; Perform 16 bit divison until done
000254 f7e1                      	BRNE	MOVAVG_DIVIDE_LOOP													; ^
                                 
000255 9310 0073                 	STS		ACCELEROMETER, TEMP2												; Save value of division into SRAM
                                 
000257 9508                      	RET
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> CONTROL UNIT
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > FLAGS
                                 
                                 LOAD_FLAGS:
                                 	
000258 94f8                      	CLI																			; Disable Interrupts
                                 
000259 9100 006e                 	LDS		TEMP1, FUNC_FLG														; Merge SRAM Function Flags from SRAM with Register Function Flags
00025b 2a10                      	OR		FNFLG, TEMP1														; ^
                                 
00025c 2700                      	CLR		TEMP1																; Reset SRAM Function Flags
00025d 9300 006e                 	STS		FUNC_FLG, TEMP1														; ^
                                 
00025f 9478                      	SEI																			; Enable Interrupts
                                 
000260 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > CLOCK
                                 
                                 CLOCK:
                                 
000261 0000                      	NOP																			; Do Something
                                 
                                 	;MOV		TEMP1, FNFLG														; Clear TMR1 flag
                                 	;CBR		TEMP1,  (1<<TMR1)													; ^
                                 	;MOV		FNFLG, TEMP1														; ^
                                 
000262 2d01
000263 7e0f
000264 2e10                      	CFLG	FNFLG, TMR1															; Clear TMR1 flag in FNFLG
                                 
000265 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > DEBUGGING
                                 
                                 EMPTY:
000266 0000                      	NOP
000267 9508                      	RET
                                 
                                 TEST:
                                 
000268 e30c                      	LDI		TEMP1, 60
000269 9300 0068                 	STS		RECENT_DAT, TEMP1
                                 
00026b 940e 0214                 	CALL	SET_MOTOR_PWM
00026d 940e 0280                 	CALL	DELAY
00026f 940e 0221                 	CALL	SET_MOTOR_BREAK
000271 940e 0280                 	CALL	DELAY
                                 
000273 9508                      	RET
                                 
                                 TEST35:
                                 	
000274 e355                      	LDI		TXREG, 0x35
000275 940e 01b0                 	CALL	SERIAL_WRITE
                                 	
000277 9508                      	RET
                                 
                                 TEST40:
                                 	
000278 e450                      	LDI		TXREG, 0x40
000279 940e 01b0                 	CALL	SERIAL_WRITE
                                 	
00027b 9508                      	RET
                                 
                                 TEST45:
                                 	
00027c e455                      	LDI		TXREG, 0x45
00027d 940e 01b0                 	CALL	SERIAL_WRITE
                                 	
00027f 9508                      	RET
                                 
                                 DELAY:
000280 e604                          LDI		TEMP1, 100
                                 LOOP3:
000281 e614                      	LDI		TEMP2, 100
                                 LOOP2:
000282 e624                      	LDI		TEMP3, 100
                                 LOOP1:
000283 952a                          DEC		TEMP3
000284 f7f1                          BRNE	LOOP1
000285 951a                          DEC		TEMP2
000286 f7d9                          BRNE	LOOP2
000287 950a                          DEC		TEMP1
000288 f7c1                          BRNE	LOOP3
                                 
000289 9508                          RET
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > 10ms DELAY
                                 
                                 DELAY_10MS:
                                 
00028a ed00                          LDI		TEMP1, 208
00028b ec1a                          LDI		TEMP2, 202
                                 
                                 DELAY_10MS_LOOP:
                                 
00028c 951a                      	DEC		TEMP2
00028d f7f1                          BRNE	DELAY_10MS_LOOP
00028e 950a                          DEC		TEMP1
00028f f7e1                          BRNE	DELAY_10MS_LOOP
000290 0000                          NOP
                                 
000291 9508                      	RET
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > 100us DELAY
                                 
                                 DELAY_100uS:
                                 
000292 e003                          LDI  TEMP1, 3
000293 e113                          LDI  TEMP2, 19
                                 
                                 DELAY_100uS_LOOP:
                                 	
000294 951a                      	DEC  TEMP2
000295 f7f1                          BRNE DELAY_100US_LOOP
000296 950a                          DEC  TEMP1
000297 f7e1                          BRNE DELAY_100US_LOOP
                                 
000298 9508                      	RET
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> INTERRUPT HANDLERS
                                 
                                 INT0_HANDLER:
                                 	
000299 9130 006e                 	LDS		TEMPI, FUNC_FLG														; Load Function Flags from SRAM into Temporary Interrupt Register
00029b 9468                      	SET																			; Set T flag
00029c f937                      	BLD		TEMPI, TACHO														; Set BIT in Temporary Interrupt Register
00029d 9330 006e                 	STS		FUNC_FLG, TEMPI														; Store Function Flags to SRAM
                                 
00029f 9518                      	RETI																		; Return
                                 
                                 INT1_HANDLER:
                                 	
0002a0 9130 006e                 	LDS		TEMPI, FUNC_FLG														; Load Function Flags from SRAM into Temporary Interrupt Register
0002a2 9468                      	SET																			; Set T flag
0002a3 f936                      	BLD		TEMPI, FNLNE														; Set BIT in Temporary Interrupt Register
0002a4 9330 006e                 	STS		FUNC_FLG, TEMPI														; Store Function Flags to SRAM
                                 
0002a6 9518                      	RETI																		; Return
                                 
                                 TMR1_HANDLER:
                                 	
0002a7 9130 006e                 	LDS		TEMPI, FUNC_FLG														; Load Function Flags from SRAM into Temporary Interrupt Register
0002a9 9468                      	SET																			; Set T flag
0002aa f934                      	BLD		TEMPI, TMR1															; Set BIT in Temporary Interrupt Register
0002ab 9330 006e                 	STS		FUNC_FLG, TEMPI														; Store Function Flags to SRAM
                                 
0002ad 9518                      	RETI																		; Return
                                 
                                 ADC_HANDLER:
                                 
0002ae 9130 006e                 	LDS		TEMPI, FUNC_FLG														; Load Function Flags from SRAM into Temporary Interrupt Register
0002b0 9468                      	SET																			; Set T flag
0002b1 f935                      	BLD		TEMPI, ACCLR														; Set BIT in Temporary Interrupt Register
0002b2 9330 006e                 	STS		FUNC_FLG, TEMPI														; Store Function Flags to SRAM		
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32" register use summary:
x  :   5 y  :  17 z  :   3 r0 :  15 r1 :  26 r2 :  18 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 185 r17:  38 r18:  22 r19:  12 r20:   8 
r21:  11 r22:   0 r23:   0 r24:  15 r25:  16 r26:   8 r27:   4 r28:   3 
r29:   3 r30:   7 r31:   5 
Registers used: 20 out of 35 (57.1%)

"ATmega32" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   1 adiw  :   5 and   :   1 
andi  :   1 asr   :   1 bclr  :   0 bld   :   4 brbc  :   0 brbs  :   0 
brcc  :   1 brcs  :   0 break :   0 breq  :  12 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 brlt  :   0 brmi  :   0 
brne  :  16 brpl  :   0 brsh  :   2 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  30 cbi   :   3 cbr   :  10 
clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  15 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   6 cpc   :   4 
cpi   :  16 cpse  :   0 dec   :   9 eor   :   1 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   1 ijmp  :   0 in    :   5 inc   :   4 jmp   :   5 
ld    :  11 ldd   :   0 ldi   :  51 lds   :  33 lpm   :   6 lsl   :   0 
lsr   :   0 mov   :  36 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   6 or    :   2 ori   :   1 out   :  22 pop   :   0 
push  :   0 rcall :  11 ret   :  43 reti  :   4 rjmp  :  28 rol   :   0 
ror   :   1 sbc   :   1 sbci  :   0 sbi   :   7 sbic  :   1 sbis  :   3 
sbiw  :   3 sbr   :   4 sbrc  :  16 sbrs  :   5 sec   :   0 seh   :   0 
sei   :   2 sen   :   0 ser   :   2 ses   :   0 set   :   4 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  10 std   :   0 sts   :  51 
sub   :   1 subi  :   0 swap  :   0 tst   :   1 wdr   :   0 
Instructions used: 54 out of 113 (47.8%)

"ATmega32" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00056a   1278     48   1326   32768   4.0%
[.dseg] 0x000060 0x000060      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
