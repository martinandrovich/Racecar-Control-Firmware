
AVRASM ver. 2.2.7  C:\Users\Martin\Desktop\Racecar-Control-Firmware\main.asm Fri May 04 21:38:44 2018

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m32def.inc'
C:\Users\Martin\Desktop\Racecar-Control-Firmware\main.asm(33): Including file 'C:\Users\Martin\Desktop\Racecar-Control-Firmware\macros.inc'
C:\Users\Martin\Desktop\Racecar-Control-Firmware\main.asm(34): Including file 'C:\Users\Martin\Desktop\Racecar-Control-Firmware\ram_table.inc'
C:\Users\Martin\Desktop\Racecar-Control-Firmware\main.asm(35): Including file 'C:\Users\Martin\Desktop\Racecar-Control-Firmware\command_table.inc'
C:\Users\Martin\Desktop\Racecar-Control-Firmware\main.asm(36): Including file 'C:\Users\Martin\Desktop\Racecar-Control-Firmware\break_table.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m32def.inc'
C:\Users\Martin\Desktop\Racecar-Control-Firmware\main.asm(33): Including file 'C:\Users\Martin\Desktop\Racecar-Control-Firmware\macros.inc'
C:\Users\Martin\Desktop\Racecar-Control-Firmware\main.asm(34): Including file 'C:\Users\Martin\Desktop\Racecar-Control-Firmware\ram_table.inc'
C:\Users\Martin\Desktop\Racecar-Control-Firmware\main.asm(35): Including file 'C:\Users\Martin\Desktop\Racecar-Control-Firmware\command_table.inc'
C:\Users\Martin\Desktop\Racecar-Control-Firmware\main.asm(36): Including file 'C:\Users\Martin\Desktop\Racecar-Control-Firmware\break_table.inc'
                                 
                                 ; ###################################################################################################################################################
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32DEF_INC_
                                 #define _M32DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega32
                                 #pragma AVRPART ADMIN PART_NAME ATmega32
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write secion read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler bits
                                 .equ	TWPS1	= 1	; TWI Prescaler bits
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x085f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M32DEF_INC_ */
                                 
                                 
                                 ; Racecar Control Firmware
                                 ; Version 1.2.0
                                 ; 
                                 ; Sequential Flag Architecture
                                 
                                 ; ___________________________________________________________________________________________________________________________________________________
                                 ; >> VECTORS:
                                 
                                 .ORG	0x00																	; Reset Vector
000000 940c 0052                 	JMP		INIT																; ^
                                 
                                 .ORG 	0x02																	; INT0 Interrupt (PD2)
000002 940c 02ed                 	JMP		INT0_HANDLER														; ^
                                 	 
                                 .ORG	0x04																	; INT1 Interrupt (PD3)
000004 940c 02f4                 	JMP 	INT1_HANDLER														; ^
                                 
                                 .ORG	0x14																	; TIMER1 Compare Match Interrupt
000014 940c 02fb                 	JMP		TMR1_HANDLER														; ^
                                 
                                 .ORG	0x20																	; ADC Conversion Complete Interrupt (PAO)
000020 940c 0302                 	JMP		ADC_HANDLER															; ^
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> DEFINITIONS
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > INCLUDES
                                 
                                 .ORG	0x28
                                 
                                 	.INCLUDE	"macros.inc"													; Include Macros
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> MACROS
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > SET FLAG
                                 
                                  .MACRO	SFLG
                                 
                                 	MOV		TEMP1, @0														; Clear Flag (@1) of Register (@0)
                                 	SBR		TEMP1, (1<<@1)													; ^
                                 	MOV		@0, TEMP1														; ^
                                 
                                 .ENDMACRO
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > CLEAR FLAG
                                 
                                  .MACRO	CFLG
                                 
                                 	MOV		TEMP1, @0														; Clear Flag (@1) of Register (@0)
                                 	CBR		TEMP1, (1<<@1)													; ^
                                 	MOV		@0, TEMP1														; ^
                                 
                                 	.INCLUDE	"ram_table.inc"													; Include RAM Table
                                 
                                 ; >> RAM TABLE
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > Variables [32B]
                                 
                                 .EQU	TACHOMETER_H					= 0x0060
                                 .EQU	TACHOMETER_L					= 0x0061
                                 
                                 .EQU	COMDATA_H						= 0x0062
                                 .EQU	COMDATA_L						= 0x0063
                                 
                                 .EQU	ADC_H							= 0x0064
                                 .EQU	ADC_L							= 0x0065
                                 
                                 .EQU	TEL_STEP						= 0x0066
                                 
                                 .EQU	RECENT_CMD						= 0x0067
                                 .EQU	RECENT_DAT						= 0x0068
                                 
                                 .EQU	DATA_H							= 0x0069
                                 .EQU	DATA_L							= 0x006A
                                 
                                 .EQU	SERIAL_RX						= 0x006B
                                 .EQU	SERIAL_TX						= 0x006C
                                 
                                 .EQU	DUTY_CYCLE						= 0x006D
                                 
                                 .EQU	FUNC_FLG						= 0x006E
                                 .EQU	MODE_FLG						= 0x006F
                                 
                                 .EQU	FINISHLINE						= 0x0070
                                 
                                 .EQU	MOVAVG_RECENT_XH				= 0x0071
                                 .EQU	MOVAVG_RECENT_XL				= 0x0072
                                 
                                 .EQU	ACCELEROMETER					= 0x0073
                                 
                                 .EQU	TURN_MIN_TACHOMETER_H			= 0x0074		; Old
                                 .EQU	TURN_MIN_TACHOMETER_L			= 0x0075		; ^
                                 
                                 .EQU	MAPPING_DEBOUNCE_H				= 0x0074
                                 .EQU	MAPPING_DEBOUNCE_L				= 0x0075
                                 
                                 .EQU	TACHOMETER_L_PREV				= 0x0076
                                 
                                 .EQU	TRACK_LENGTH_H					= 0x0078
                                 .EQU	TRACK_LENGTH_L					= 0x0079
                                 
                                 .EQU	LATEST_STRAIGHT					= 0x007A
                                 
                                 .EQU	LATEST_STRAIGHT_H				= 0x007B
                                 .EQU	LATEST_STRAIGHT_L				= 0x007C
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > Moving Average Filter [MOVAVG | 128B]
                                 
                                 .EQU	MOVAVG_TABLE					= 0x0100
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > Mapping [128B]
                                 
                                 .EQU	MAPP_TABLE						= 0x0200
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > Trajectory [1024B]
                                 
                                 .EQU	TRAJ_TABLE						= 0x0300
                                 
                                 	.INCLUDE	"command_table.inc"												; Include Command Table
                                 
                                 ; >> COMMUNICATION PROTOCOL COMMANDS
                                 
                                 COMMANDS:
                                 	;DW		0xTYP_00, 0										; Explanation
                                 	;  DW	  0x00_CMD, FUNC_ADDRESS						; ^
                                 
000028 0000
000029 0000                      	.DW		0x00_00, 0										; SoT
                                 
00002a aa00
00002b 0000                      	.DW		0xAA_00, 0										; >> GET
00002c 0003
00002d 02ba                      	  .DW	  0x00_03, EMPTY									; DATA3
00002e 0012
00002f 02ba                      	  .DW	  0x00_12, EMPTY									; VAR1
000030 0013
000031 024a                      	  .DW	  0x00_13, MAPPING_GET								; MAPP
000032 0016
000033 0258                      	  .DW	  0x00_16, TRAJECTORY_GET							; TRAJ
                                 
000034 5500
000035 0000                      	.DW		0x55_00, 0										; >> SET
000036 0010
000037 0268                      	  .DW	  0x00_10, SET_MOTOR_PWM							; START
000038 0011
000039 02ba                      	  .DW	  0x00_11, EMPTY									; STOP
00003a 0012
00003b 02ba                      	  .DW	  0x00_12, EMPTY									; AUTO
00003c 0013
00003d 023c                      	  .DW	  0x00_13, MAPPING_SET								; MAPP
00003e 0014
00003f 0233                      	  .DW	  0x00_14, BROADCAST_SET							; BROD
000040 0016
000041 0247                      	  .DW	  0x00_16, TRAJECTORY_SET							; TRAJ
                                 
000042 eeee                      	.INCLUDE	"break_table.inc"												; Include Brake Offset Table
000043 0000                      
                                 ; >> BREAK OFFSET TABLE
                                 
                                 BREAK_OFFSET_TABLE:
000044 0a12                      	.DB		18, 10
000045 0a24                      	.DB		36, 10
000046 0a37                      	.DB		55, 10
000047 0a49                      	.DB		73, 10
000048 0a5b                      	.DB		91, 10
000049 0a6d                      	.DB		109, 10
00004a 0a80                      	.DB		128, 10
00004b 0a92                      	.DB		146, 10
00004c 0aa4                      	.DB		164, 10						
00004d 0ab6                      	.DB		182, 10
00004e 0ac9                      	.DB		201, 10
00004f 0adb                      	.DB		219, 10
000050 0aed                      	.DB		237, 10
000051 0000                      	.DB		0, 0
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > CONSTANTS
                                 
                                 	.EQU	BAUDRATE	= 0x00CF												; Baudrate configuration (default = 0xCF)
                                 
                                 	.EQU	TMR1FREQ	= 976 - 1												; Timer1 configuration
                                 
                                 																				; 62500 - 1		= 4Hz
                                 																				; 31250 - 1		= 8Hz
                                 																				; 15625 - 1		= 16Hz
                                 																				;  7812 - 1		= 32Hz
                                 																				;  1953 - 1		= 128Hz
                                 																				;   976 - 1		= 256Hz [DEFAULT]
                                 																				;   488 - 1		= 512Hz
                                 																				;	244 - 1		= 1024Hz
                                 																				;	122 - 1		= 2048Hz
                                 																				;	 61 - 1		= 4096Hz
                                 
                                 	; Moving Average Filter
                                 	
                                 	.EQU	MOVAVG_SIZE					= 64									; Size (bytes) of Moving Average Filter
                                 	.EQU	MOVAVG_DIVS					= 6										; Number of division to perform (i.e. 2^5 = 32)
                                 	.EQU	MOVAVG_TABLE_END			= MOVAVG_TABLE + MOVAVG_SIZE			;
                                 
                                 	; Mapping & Turn Detection Constants
                                 
                                 	.EQU	TURN_TH_IN_LEFT				= 122
                                 	.EQU	TURN_TH_IN_RIGHT			= 115
                                 	.EQU	TURN_TH_OUT_LEFT			= 122
                                 	.EQU	TURN_TH_OUT_RIGHT			= 115
                                 
                                 	.EQU	MAPPING_SEEK_PWM			= 58									; Mapping Seek PWM in BYTES (0-255)
                                 	.EQU	MAPPING_PWM					= 90									; Mapping PWM in BYTES (0-255)
                                 	.EQU	MAPPING_DEBOUNCE_VAL		= 10									; Mapping Debounce in TICKS
                                 	.EQU	MAPPING_OFFSET_IN			= 8										; Mapping Offset In in TICKS
                                 	.EQU	MAPPING_OFFSET_OUT			= 11									; Mapping Offset Out in TICKS
                                 
                                 	; Trajectory Constants
                                 	
                                 	.EQU	TRAJECTORY_ACCLR_OFFSET		= 0										;
                                 	.EQU	TRAJECTORY_BRAKE_OFFSET		= 0										;
                                 
                                 	.EQU	TRAJECTORY_ACCLR_PWM		= 255									;
                                 	.EQU	TRAJECTORY_TURN_PWM			= 101									;
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > REGISTERS
                                 
                                 	.DEF	MDFLG		= R0													; Mode Flags
                                 	.DEF	FNFLG		= R1													; Function Flags for Interrupts
                                 	.DEF	MTFLG		= R2													; Mapping & Trajectory Flags
                                 	
                                 	.DEF	TEMP1		= R16													; Temporary Register #1
                                 	.DEF	TEMP2		= R17													; Temporary Register #2
                                 	.DEF	TEMP3		= R18													; Temporary Register #3
                                 	.DEF	TEMPI		= R19													; Temporary Interrupts Register
                                 	
                                 	.DEF	TEMPWH		= R25													; Temporary Register (Word) Pair
                                 	.DEF	TEMPWL		= R24													; ^
                                 		
                                 	.DEF	RXREG		= R20													; USART Reception Register
                                 	.DEF	TXREG		= R21													; USART Transmission Register
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > FLAGS
                                 
                                 	; MDFLG | Mode Flags 
                                 
                                 	.EQU	AUTO		= 7														; Autonomous Mode
                                 	.EQU	MAP			= 6														; Mapping Mode
                                 	.EQU	BROD2		= 5														; Broadcast Mode
                                 	.EQU	BROD1		= 4														; ^
                                 	.EQU	BROD0		= 3														; ^
                                 
                                 	; FNFLG | Function Flags
                                 
                                 	.EQU	TACHO		= 7														; Tachometer Ready
                                 	.EQU	FNLNE		= 6														; Finishline Ready
                                 	.EQU	ACCLR		= 5														; Accelerometer Ready
                                 	.EQU	TMR1		= 4														; Timer1 Ready
                                 	.EQU	CMDPD		= 3														; Command Pending
                                 
                                 	; MTFLG | Mapping & Trajectory Flags
                                 
                                 	.EQU	ISMAP		= 7														; Program currently mapping
                                 	.EQU	INTURN		= 6														; In turn
                                 	.EQU	TURNDIR		= 5														; Direction of turn (0 = L & 1 = R)
                                 	.EQU	TJRDY		= 4														; Trajectory ready
                                 
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> INITIALIZATION
                                 
                                 INIT:
                                 
                                 	; Stack Pointer
                                 
000052 e008                      	LDI 	TEMP1, HIGH(RAMEND)													; Initialize Stack Pointer
000053 bf0e                      	OUT 	SPH, TEMP1															; ^
000054 e50f                      	LDI 	TEMP1,  LOW(RAMEND)													; ^
000055 bf0d                      	OUT 	SPL, TEMP1															; ^
                                 
                                 	; SRAM Initialization
                                 
000056 2700                      	CLR		TEMP1																; Initialize allocated SRAM to NULL
000057 9300 0068                 	STS		RECENT_DAT, TEMP1													; ^
000059 9300 0066                 	STS		TEL_STEP, TEMP1														; ^
00005b 9300 006f                 	STS		MODE_FLG, TEMP1														; ^
00005d 9300 006e                 	STS		FUNC_FLG, TEMP1														; ^
00005f 9300 0060                 	STS		TACHOMETER_H, TEMP1													; ^
000061 9300 0061                 	STS		TACHOMETER_L, TEMP1													; ^
000063 9300 0076                 	STS		TACHOMETER_L_PREV, TEMP1											; ^
000065 9300 0074                 	STS		TURN_MIN_TACHOMETER_H, TEMP1										; ^
000067 9300 0075                 	STS		TURN_MIN_TACHOMETER_L, TEMP1										; ^
000069 9300 0073                 	STS		ACCELEROMETER, TEMP1												; ^
00006b 9300 0064                 	STS		ADC_H, TEMP1														; ^
00006d 9300 0065                 	STS		ADC_L, TEMP1														; ^
00006f 9300 0070                 	STS		FINISHLINE, TEMP1
                                 
000071 940e 028d                 	CALL	MOVAVG_POINTER_RESET												; Reset Moving Average pointer
000073 940e 0290                 	CALL	MOVAVG_SRAM_SETUP													; Initialize allocated Moving Average SRAM to default
                                 
                                 	; Flags Initialization
                                 
000075 2400                      	CLR		MDFLG																; Clear Flag Registers
000076 2411                      	CLR		FNFLG																; ^
000077 2422                      	CLR		MTFLG																; ^
                                 
                                 	; USART Config
                                 
000078 e000                      	LDI		TEMP1, HIGH(BAUDRATE)												; Set Transmission Rate
000079 bd00                      	OUT		UBRRH, TEMP1														; ^
00007a ec0f                      	LDI		TEMP1,  LOW(BAUDRATE)												; ^
00007b b909                      	OUT		UBRRL, TEMP1														; ^
                                 
00007c e002                      	LDI		TEMP1, 0x02															; Clear all Error Flags + Enable DoubleMode
00007d b90b                      	OUT		UCSRA, TEMP1														; ^
                                 
00007e e108                      	LDI		TEMP1, (1<<RXEN)|(1<<TXEN)											; Enable Transmission & Reception
00007f b90a                      	OUT		UCSRB, TEMP1														; ^
                                 
000080 e806                      	LDI		TEMP1, (1<<URSEL)|(3<<UCSZ0)										; Set Frame Format (8, N, 1)
000081 bd00                      	OUT		UCSRC, TEMP1														; ^
                                 
000082 2744                      	CLR		RXREG																; Reset Reception Register
000083 2755                      	CLR		TXREG																; Reset Transmission Register
                                 
                                 	; ADC Config	
                                 
000084 e200                      	LDI		TEMP1, (1<<ADLAR)													; Choose -> ADC0 and AVCC. Vcc = 5V
000085 b907                      	OUT		ADMUX, TEMP1														; AUTOTRIGGER ENABLED (ADATE) otherwise it doesnt work?
                                 
000086 e80f                      	LDI		TEMP1, (1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)			; ADEN: ENABLE ADC, ADSC: START CONVERSATION ; (1<<ADPS2)
000087 b906                      	OUT		ADCSRA, TEMP1														; ADFR: Activate Free Running Select, Prescaler: 128 // 125kHz ADC clock
                                 
000088 9a36                      	SBI		ADCSR, ADSC															; Start ADC Conversion	
                                 
                                 	; I/O (Port) Setup
                                 
000089 9a8c                      	SBI		DDRD, PD4															; Set PD4 on PORTD as Output
00008a 9a8f                      	SBI		DDRD, PD7															; Set PD7 on PORTD as Output
00008b 9a92                      	SBI		PORTD, PD2															; Set PD2 on PORTD as Pullup Input
                                 
00008c 9894                      	CBI		PORTD, PD4															; Disable MOSFET Brake
                                 
                                 	; Timer1 Setup
                                 
00008d e100                      	LDI		TEMP1, (1<<OCIE1A)													; Enable Timer1 Compare Match Interrupt
00008e bf09                      	OUT		TIMSK, TEMP1														; ^
                                 
00008f e000                      	LDI		TEMP1, 0x00															; Set Default
000090 bd0f                      	OUT		TCCR1A, TEMP1														; ^
                                 
000091 e00b                      	LDI		TEMP1, (1<<CS11)|(1<<CS10)|(1<<WGM12)								; Set 64 Prescelar, CTC-MODE
000092 bd0e                      	OUT		TCCR1B, TEMP1														; ^
                                 
000093 e003                      	LDI		TEMP1, HIGH(TMR1FREQ)												; Set timer offset
000094 bd0b                      	OUT		OCR1AH, TEMP1														; ^
000095 ec0f                      	LDI		TEMP1,  LOW(TMR1FREQ)												; ^
000096 bd0a                      	OUT		OCR1AL, TEMP1														; ^
                                 
000097 e004                      	LDI		TEMP1, (1<<TOV1)													; Enable Timer1
000098 bf08                      	OUT		TIFR, TEMP1															; ^
                                 	
                                 	; Waveform Generator (Timer2)
                                 
000099 e000                      	LDI		TEMP1, 0x00															; Reset Timer2
00009a bd03                      	OUT		OCR2, TEMP1															; ^
                                 
                                 	; External Interrupt Setup
                                 	
00009b e00f                      	LDI		TEMP1, (1<<ISC01)|(1<<ISC00) | (1<<ISC10)|(1<<ISC11)				; Set INT0 & INT1 to rising edge
00009c bf05                      	OUT		MCUCR, TEMP1														; ^
                                 
00009d ec00                      	LDI 	TEMP1, (1<<INT0)|(1<<INT1)											; Enable external interrupts
00009e bf0b                      	OUT 	GICR, TEMP1															; ^
                                 
00009f 9478                      	SEI																			; Set Global Interrupt Flag
                                 
0000a0 c000                      	RJMP	MAIN																; Start MAIN Program
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> MAIN PROGRAM
                                 
                                 MAIN:
                                 	
0000a1 940e 02ac                 	CALL	LOAD_FLAGS															; Load Flags
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > FUNCTIONS
                                 	
0000a3 940e 01f5                 	CALL	TELEGRAM_CHECK														; Check for Telegrams
                                 
0000a5 fc13                      	SBRC	FNFLG, CMDPD														; Command Pending
0000a6 940e 022e                 	CALL	EXECUTE_COMMAND														; ^
                                 	
0000a8 fc17                      	SBRC	FNFLG, TACHO														; Tachometer Ready
0000a9 940e 00bd                 	CALL	LOG_TACHOMETER														; ^
                                 
0000ab fc16                      	SBRC	FNFLG, FNLNE														; Finishline Ready
0000ac 940e 00ca                 	CALL	LOG_FINISHLINE														; ^
                                 
0000ae fc15                      	SBRC	FNFLG, ACCLR														; Accelerometer Ready
0000af 940e 00d5                 	CALL	LOG_ACCELEROMETER													; ^
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > MODES
                                 
0000b1 fc07                      	SBRC	MDFLG, AUTO															; Autonomous Mode
0000b2 0000                      	NOP																			; ^
                                 
0000b3 fc06                      	SBRC	MDFLG, MAP															; Mapping Mode
0000b4 940e 00e8                 	CALL	MAPPING																; ^
                                 
0000b6 fc03                      	SBRC	MDFLG, BROD0														; Broadcast Mode
0000b7 940e 01c0                 	CALL	BROADCAST															; ^
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > CLOCK (TIMER1)
                                 
0000b9 fc14                      	SBRC	FNFLG, TMR1															; Timer1 Ready
0000ba 940e 02b5                 	CALL	CLOCK																; ^
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > REPEAT LOOP
                                 
0000bc cfe4                      	RJMP	MAIN																; Loop forever
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> SENSOR PROCESSING & LOGGING
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > TACHOMETER
                                 
                                 LOG_TACHOMETER:
                                 	
                                 	// Tachometer value is not allowed to exceed 32.768
                                 	
0000bd 9190 0060                 	LDS		TEMPWH, TACHOMETER_H												; Load previous values from SRAM
0000bf 9180 0061                 	LDS		TEMPWL, TACHOMETER_L												; into WORD registers
                                 
0000c1 9601                      	ADIW	TEMPWH:TEMPWL, 1													; Increment data
                                 
0000c2 9390 0060                 	STS		TACHOMETER_H, TEMPWH												; Store new values into SRAM
0000c4 9380 0061                 	STS		TACHOMETER_L, TEMPWL												; ^
                                 
0000c6 2d01
0000c7 770f
0000c8 2e10                      	CFLG	FNFLG, TACHO														; Clear TACHO flag in FNFLG
                                 
                                 	;MOV		TEMP1, FNFLG														; Clear TACHO Flag
                                 	;CBR		TEMP1, (1<<TACHO)													; ^
                                 	;MOV		FNFLG, TEMP1														; ^
                                 
0000c9 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > FINISH LINE
                                 
                                 LOG_FINISHLINE:
                                 	
0000ca 9100 0070                 	LDS		TEMP1, FINISHLINE													; Load, increment & store Finishline value
0000cc 9503                      	INC		TEMP1																; ^
0000cd 9300 0070                 	STS		FINISHLINE, TEMP1													; ^
                                 
0000cf fc06                      	SBRC	MDFLG, MAP	 														; Skip clearing flag if mapping mode enabled
0000d0 9508                      	RET																			; ^
                                 
                                 	;MOV		TEMP1, FNFLG														; Clear FNLNE Flag
                                 	;CBR		TEMP1, (1<<FNLNE)													; ^
                                 	;MOV		FNFLG, TEMP1														; ^
                                 
0000d1 2d01
0000d2 7b0f
0000d3 2e10                      	CFLG	FNFLG, FNLNE														; Set FNLNE flag in FNFLG
                                 
0000d4 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > ACCELEROMETER
                                 
                                 LOG_ACCELEROMETER:
                                 
0000d5 fe14                      	SBRS	FNFLG, TMR1															; Check if logging is synchronized with CLOCK (Timer1)
0000d6 9508                      	RET
                                 
0000d7 b104                      	IN		TEMP1, ADCL															; Read LOW of ADC
0000d8 0000                      	NOP																			; ^
0000d9 9300 0065                 	STS		ADC_L, TEMP1														; ^
                                 
0000db b105                      	IN		TEMP1, ADCH															; Read HIGH of ADC
0000dc 0000                      	NOP																			; ^
0000dd 9300 0064                 	STS		ADC_H, TEMP1														; ^
                                 
0000df 9300 0073                 	STS		ACCELEROMETER, TEMP1
                                 
0000e1 940e 027e                 	CALL	MOVAVG																; Apply Moving Average Filter
                                 
0000e3 9a36                      	SBI		ADCSR, ADSC															; Start ADC Conversion
                                 
0000e4 2d01
0000e5 7d0f
0000e6 2e10                      	CFLG	FNFLG, ACCLR														; Set ACCLR flag in FNFLG
                                 
                                 	;MOV		TEMP1, FNFLG														; Clear ACCLR Flag
                                 	;CBR		TEMP1, (1<<ACCLR)													; ^
                                 	;MOV		FNFLG, TEMP1														; ^
                                 
0000e7 9508                      	RET																			; Return
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> MAPPING
                                 
                                 MAPPING:
                                 	
0000e8 fc16                      	SBRC	FNFLG, FNLNE														; Check FNLNE flag
0000e9 c003                      	RJMP	MAPPING_ISMAP_CHECK													; If SET then check ISMAP
                                 
0000ea fc27                      	SBRC	MTFLG, ISMAP														; Check ISMAP flag
0000eb c037                      	RJMP	MAPPING_CHECK_DEBOUNCE												; If SET then continue mapping
                                 
0000ec c076                      	RJMP	MAPPING_ESC															; Return
                                 
                                 MAPPING_ISMAP_CHECK:
                                 
                                 	// If  ISMAP -> CLR ISMAP(MTFLG) && CLR MAP(MDFLG)							= End Mapping
                                 	// If ~ISMAP -> SET ISMAP													= Begin Mapping
                                 	
                                 	;MOV		TEMP1, FNFLG														; Clear Finishline Flag
                                 	;CBR		TEMP1, (1<<FNLNE)													; ^
                                 	;MOV		FNFLG, TEMP1														; ^
                                 
0000ed 2d01
0000ee 7b0f
0000ef 2e10                      	CFLG	FNFLG, FNLNE														; Set FNFNE flag in FNFLG
                                 	
0000f0 fc27                      	SBRC	MTFLG, ISMAP														; Check ISMAP flag
0000f1 c016                      	RJMP	MAPPING_END															; If SET then end mapping
                                 
0000f2 fe27                      	SBRS	MTFLG, ISMAP														; Check ISMAP flag
0000f3 c000                      	RJMP	MAPPING_BEGIN														; If CLR then begin mapping
                                 
                                 	
                                 MAPPING_BEGIN:
                                 
                                 	;MOV		TEMP1, MTFLG														; Set ISMAP Flag
                                 	;SBR		TEMP1, (1<<ISMAP)													; ^
                                 	;MOV		MTFLG, TEMP1														; ^
                                 
0000f4 2d02
0000f5 6800
0000f6 2e20                      	SFLG	MTFLG, ISMAP														; Set ISMAP flag in MTFLG
                                 
0000f7 2700                      	CLR		TEMP1																; Reset Tachometer
0000f8 9300 0060                 	STS		TACHOMETER_H, TEMP1													; ^
0000fa 9300 0061                 	STS		TACHOMETER_L, TEMP1													; ^
                                 
0000fc d032                      	RCALL	MAPPING_RESET_DEBOUNCE												; Reset Tachometer Debounce											
                                 
0000fd e50a                      	LDI		TEMP1, MAPPING_PWM													; Start vehicle with mapping PWM
0000fe 9300 0068                 	STS		RECENT_DAT, TEMP1													; ^	
000100 940e 0268                 	CALL	SET_MOTOR_PWM														; ^
                                 
000102 e0d2                      	LDI		YH, HIGH(MAPP_TABLE)												; Initialize Y Pointer
000103 e0c0                      	LDI		YL,  LOW(MAPP_TABLE)												; ^
                                 
000104 2700                      	CLR		TEMP1																; Store 0x0000 into mapping in SRAM
000105 9309                      	ST		Y+, TEMP1															; ^
000106 9309                      	ST		Y+, TEMP1															; ^
                                 
000107 c05b                      	RJMP	MAPPING_ESC															; Return
                                 
                                 MAPPING_END:
                                 	
                                 	;MOV		TEMP1, MDFLG														; Clear MAP flag
                                 	;CBR		TEMP1, (1<<MAP)														; ^
                                 	;MOV		MDFLG, TEMP1														; ^
                                 
000108 2d00
000109 7b0f
00010a 2e00                      	CFLG	MDFLG, MAP															; Clear MAP flag in MDFLG
00010b 9200 006f                 	STS		MODE_FLG, MDFLG														; Store new mode flags to SRAM
                                 
                                 	;MOV		TEMP1, MTFLG														; Clear ISMAP Flag
                                 	;CBR		TEMP1, (1<<ISMAP)													; ^
                                 	;MOV		MTFLG, TEMP1														; ^
                                 
00010d 2d02
00010e 770f
00010f 2e20                      	CFLG	MTFLG, ISMAP														; Clear ISMAP flag in MTFLG
                                 
000110 9110 0060                 	LDS		TEMP2, TACHOMETER_H													; Load current Tachometer values
000112 9120 0061                 	LDS		TEMP3, TACHOMETER_L													; ^
                                 
000114 9310 0078                 	STS		TRACK_LENGTH_H, TEMP2 												; Store Track Length (Finishline Tachometer value) into SRAM
000116 9320 0079                 	STS		TRACK_LENGTH_L, TEMP3 												; ^
                                 
                                 	;ST		Y+, TEMP2															; Save finishline tachometer data
                                 	;ST		Y+, TEMP3															;
                                 
000118 2700                      	CLR		TEMP1																; Reset Tachometer
000119 9300 0060                 	STS		TACHOMETER_H, TEMP1													; ^
00011b 9300 0061                 	STS		TACHOMETER_L, TEMP1													; ^
                                 
00011d ef0f                      	SER		TEMP1																; Store 0xFFFF into mapping in SRAM
00011e 9309                      	ST		Y+, TEMP1															; ^
00011f 8308                      	ST		Y, TEMP1															; ^
                                 
000120 940e 0275                 	CALL	SET_MOTOR_BREAK														; Break vehicle
                                 
000122 c040                      	RJMP	MAPPING_ESC															; Return
                                 
                                 MAPPING_CHECK_DEBOUNCE:
                                 	
000123 9190 0060                 	LDS		TEMPWH, TACHOMETER_H												; Load current Tachometer value
000125 9180 0061                 	LDS		TEMPWL, TACHOMETER_L												; ^
                                 
000127 9110 0074                 	LDS		TEMP2, MAPPING_DEBOUNCE_H											; Load Debounce Tachometer value
000129 9120 0075                 	LDS		TEMP3, MAPPING_DEBOUNCE_L											; ^
                                 
00012b 1782                      	CP		TEMPWL, TEMP3														; Check if debounce is reached
00012c 0791                      	CPC		TEMPWH, TEMP2 														; ^
00012d f1a8                      	BRLO	MAPPING_ESC															; Escape if FALSE
00012e c00a                      	RJMP	MAPPING_CHECK_TURN													; Continue if TRUE
                                 
                                 MAPPING_RESET_DEBOUNCE:
                                 
00012f 9190 0060                 	LDS		TEMPWH, TACHOMETER_H												; Load current Tachometer value
000131 9180 0061                 	LDS		TEMPWL, TACHOMETER_L												; ^
                                 	
000133 960a                      	ADIW	TEMPWH:TEMPWL, MAPPING_DEBOUNCE_VAL									; Update Minumum Tachometer Detection value (current Tachometer + Constant)
                                 
000134 9390 0074                 	STS		MAPPING_DEBOUNCE_H, TEMPWH											; Store values to SRAM
000136 9380 0075                 	STS		MAPPING_DEBOUNCE_L, TEMPWL											; ^
                                 
000138 9508                      	RET																			; Return
                                 
                                 MAPPING_CHECK_TURN:
                                 
000139 9110 0073                 	LDS		TEMP2, ACCELEROMETER												; Load Accelerometer value
                                 
00013b fc26                      	SBRC	MTFLG, INTURN														; Check INTURN flag
00013c c00c                      	RJMP	MAPPING_CHECK_TURN_OUT												; If SET then check if a turn has been exited
00013d c000                      	RJMP	MAPPING_CHECK_TURN_IN												; If CLR then check if a turn has been detected
                                 
                                 MAPPING_CHECK_TURN_IN:
                                 
                                 	; Check Right Turn
                                 	
                                 	;MOV		TEMP1, MTFLG														; Set TURNDIR Flag (checking right turn)
                                 	;SBR		TEMP1, (1<<TURNDIR)													; ^
                                 	;MOV		MTFLG, TEMP1														; ^
                                 
00013e 2d02
00013f 6200
000140 2e20                      	SFLG	MTFLG, TURNDIR														; Set TURNDIR flag in MTFLG
                                 
000141 3713                      	CPI		TEMP2, TURN_TH_IN_RIGHT												; Check Right Turn In
000142 f078                      	BRLO	MAPPING_ADD															; Create mapping entry if true
                                 
                                 	; Check Left Turn
                                 
                                 	;MOV		TEMP1, MTFLG														; Clear TURNDIR Flag (checking left turn)
                                 	;CBR		TEMP1, (1<<TURNDIR)													; ^
                                 	;MOV		MTFLG, TEMP1														; ^
                                 
000143 2d02
000144 7d0f
000145 2e20                      	CFLG	MTFLG, TURNDIR														; Clear TURNDIR flag in MTFLG
                                 
000146 371a                      	CPI		TEMP2, TURN_TH_IN_LEFT												; Check Left Turn In
000147 f450                      	BRSH	MAPPING_ADD															; Create mapping entry if true
                                 
000148 c01a                      	RJMP	MAPPING_ESC															; Return
                                 
                                 MAPPING_CHECK_TURN_OUT:
                                 
000149 fc25                      	SBRC	MTFLG, TURNDIR														; Check TURNDIR flag
00014a c001                      	RJMP	MAPPING_CHECK_TURN_OUT_RIGHT										; If SET then check RIGHT turn out
00014b c003                      	RJMP	MAPPING_CHECK_TURN_OUT_LEFT											; If CLR then check LEFT turn out
                                 
                                 MAPPING_CHECK_TURN_OUT_RIGHT:
                                 
00014c 3713                      	CPI		TEMP2, TURN_TH_OUT_RIGHT											; Check Right Turn Out
00014d f420                      	BRSH	MAPPING_ADD															; Create mapping entry if true
                                 
00014e c014                      	RJMP	MAPPING_ESC															; Return
                                 
                                 MAPPING_CHECK_TURN_OUT_LEFT:
                                 
00014f 371a                      	CPI		TEMP2, TURN_TH_OUT_LEFT												; Check Left Turn Out
000150 f008                      	BRLO	MAPPING_ADD															; Create mapping entry if true
                                 
000151 c011                      	RJMP	MAPPING_ESC															; Return
                                 
                                 MAPPING_ADD:
                                 
000152 2d02                      	MOV		TEMP1, MTFLG														; Toggle INTURN flag
000153 e410                      	LDI		TEMP2, (1<<INTURN)													; ^
000154 2701                      	EOR		TEMP1, TEMP2														; ^
000155 2e20                      	MOV		MTFLG, TEMP1														; ^
                                 
000156 dfd8                      	RCALL	MAPPING_RESET_DEBOUNCE												; Reset Tachometer Debounce
                                 
000157 9190 0060                 	LDS		TEMPWH, TACHOMETER_H												; Load current Tachometer values
000159 9180 0061                 	LDS		TEMPWL, TACHOMETER_L												; ^
                                 
00015b fc26                      	SBRC	MTFLG, INTURN														; 
00015c 9708                      	SBIW	TEMPWH:TEMPWL, MAPPING_OFFSET_IN									;
00015d fe26                      	SBRS	MTFLG, INTURN														;
00015e 970b                      	SBIW	TEMPWH:TEMPWL, MAPPING_OFFSET_OUT									;
                                 
                                 	// Tachometer value is not allowed to exceed 32.768
                                 
00015f fd06                      	SBRC	TEMP1, INTURN														; Set MSB of Tachometer (HIGH) to value of INTURN bit
000160 6890                      	ORI		TEMPWH, (1<<7)														; ^
                                 	
000161 9399                      	ST		Y+, TEMPWH															; Store mapping into SRAM
000162 9389                      	ST		Y+, TEMPWL															; ^
                                 
                                 MAPPING_ESC:
                                 
000163 9508                      	RET																			; Return
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> TRAJECTORY
                                 
                                 TRAJECTORY:
                                 	
                                 	// BRANCH ACCORDING TO TJRDY FLAG
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > COMPILER
                                 
                                 TRAJECTORY_COMPILER_SETUP:
                                 
000164 e0b3                      	LDI		XH, HIGH(TRAJ_TABLE)												; Load X Pointer to Trajectory Table
000165 e0a0                      	LDI		XL,  LOW(TRAJ_TABLE)												;
                                 
000166 e0d2                      	LDI		YH, HIGH(MAPP_TABLE)												; Load Y Pointer to Mapping Table
000167 e0c0                      	LDI		YL,  LOW(MAPP_TABLE)												; 
                                 
000168 2d02
000169 7e0f
00016a 2e20                      	CFLG	MTFLG, TJRDY
                                 
00016b 9109                      	LD		TEMP1, Y+															; ^
00016c 9119                      	LD		TEMP2, Y+															; 
                                 
00016d 3000                      	CPI		TEMP1, 0															; ^
                                 
00016e f009                      	BREQ	TRAJECTORY_COMPILER_RUNUP											; Branch if FinishLine 00_00
                                 
                                 	//Should start mapping, if error occured
                                 
00016f 9508                      	RET																			;
                                 
                                 TRAJECTORY_COMPILER_RUNUP:
                                 
000170 9109                      	LD		TEMP1, Y+															; Load Mapping Table TachoH & L
000171 9119                      	LD		TEMP2, Y+															; ^
                                 
000172 3f0f                      	CPI		TEMP1, 0xFF															; Check for 0xFF_FF
000173 f7e1                      	BRNE	TRAJECTORY_COMPILER_RUNUP											; ^
                                 
000174 9724                      	SBIW	Y, 4																; Offset the mapping with 4, must be last OutSwing
                                 
000175 9109                      	LD		TEMP1, Y+															; Load Last Swing
000176 8118                      	LD		TEMP2, Y															; 	
                                 
000177 930d                      	ST		X+, TEMP1															; Save Last Swing for Run_Up
000178 931d                      	ST		X+, TEMP2															;
                                 
000179 9190 0078                 	LDS		TEMPWH, TRACK_LENGTH_H 												; Load_Circuit_Length
00017b 9180 0079                 	LDS		TEMPWL, TRACK_LENGTH_L												;
                                 
00017d 1b18                      	SUB		TEMP2, TEMPWL														; Subtract Total circuit length with Last Swing value
00017e 0b09                      	SBC		TEMP1, TEMPWH														; 
                                 
00017f 9310 007c                 	STS		LATEST_STRAIGHT_L, TEMP2											; Save latest Straight
000181 9300 007b                 	STS		LATEST_STRAIGHT_H, TEMP1											;
                                 
                                 	;STS		LATEST_STRAIGHT, TEMP2
                                 
000183 e0d2                      	LDI		YH, HIGH(MAPP_TABLE+2)												; Load Y Pointer to (offset) Mapping Table
000184 e0c2                      	LDI		YL,  LOW(MAPP_TABLE+2)												; 
                                 
                                 TRAJECTORY_COMPILER_LOOP:
                                 
000185 9119                      	LD		TEMP2, Y+															; TEMP2 first because MOVW is used, remember this!
000186 9109                      	LD		TEMP1, Y+															;
                                 
000187 3f1f                      	CPI		TEMP2, 0xFF															; Check EoT
000188 f179                      	BREQ	TRAJECTORY_COMPILER_END												; 
                                 
000189 fd17                      	SBRC	TEMP2, 7															; CHECK HIGHBIT TACHO FOR BREAK OR ACCELEROMETER
00018a c00a                      	RJMP	TRAJECTORY_COMPILER_BREAK											;
00018b c000                      	RJMP	TRAJECTORY_COMPILER_ACCELERATE										; 
                                 	
                                 
                                 TRAJECTORY_COMPILER_ACCELERATE:
                                 	
00018c 01c8                      	MOVW	TEMPWH:TEMPWL, TEMP2:TEMP1											;
00018d 9700                      	SBIW	TEMPWH:TEMPWL, TRAJECTORY_ACCLR_OFFSET								;
                                 
00018e 939d                      	ST		X+, TEMPWH															;
00018f 938d                      	ST		X+, TEMPWL															;
                                 
000190 9310 007b                 	STS		LATEST_STRAIGHT_H, TEMP2											;
000192 9300 007c                 	STS		LATEST_STRAIGHT_L, TEMP1											;
                                 
000194 cff0                      	RJMP	TRAJECTORY_COMPILER_LOOP											; Loop
                                 
                                 TRAJECTORY_COMPILER_BREAK:
                                 	
000195 9190 007b                 	LDS		TEMPWH, LATEST_STRAIGHT_H											;
000197 9180 007c                 	LDS		TEMPWL,	LATEST_STRAIGHT_L											;
                                 
000199 771f                      	CBR		TEMP2, (1<<7)
                                 	
00019a 1b08                      	SUB		TEMP1, TEMPWL														; Calculate latest straight
00019b 0b19                      	SBC		TEMP2, TEMPWH														;
                                 
00019c 6810                      	SBR		TEMP2, (1<<7)
                                 
00019d 9300 007a                 	STS		LATEST_STRAIGHT, TEMP1												;
                                 
                                 	;MOV		TXREG, TEMP1
                                 	;CALL	SERIAL_WRITE
                                 
00019f d00a                      	RCALL	TRAJECTORY_COMPILER_BREAK_OFFSET									;
                                 
0001a0 9722                      	SBIW	YH:YL, 2															; Offset back
                                 
0001a1 9119                      	LD		TEMP2, Y+															; Read values again
0001a2 9109                      	LD		TEMP1, Y+															;
                                 
0001a3 771f                      	CBR		TEMP2, (1<<7)														; Clear MSB for sub
                                 
0001a4 1b02                      	SUB		TEMP1, TEMP3														;
0001a5 4010                      	SBCI	TEMP2, 0															;
                                 
0001a6 6810                      	SBR		TEMP2, (1<<7)														; Set MSB for sub
                                 
0001a7 931d                      	ST		X+, TEMP2															; Store Tachometer values for break.
0001a8 930d                      	ST		X+,	TEMP1															;
                                 
0001a9 cfdb                      	RJMP	TRAJECTORY_COMPILER_LOOP											; Do it again
                                 
                                 TRAJECTORY_COMPILER_BREAK_OFFSET:
                                 	
0001aa e0f0                      	LDI		ZH, HIGH(BREAK_OFFSET_TABLE*2)										; Load Z Pointer to Break Offset Table
0001ab e8e8                      	LDI		ZL,  LOW(BREAK_OFFSET_TABLE*2)										; ^
                                 
0001ac 9100 007a                 	LDS		TEMP1, LATEST_STRAIGHT												; Load value of Latest Straight Distance
                                 
                                 TRAJECTORY_COMPILER_BREAK_OFFSET_LOOP:
                                 
0001ae 9114                      	LPM		TEMP2, Z															; Load value of Z Pointer from Table and increment by 2
0001af 9632                      	ADIW	ZH:ZL, 2
                                 
0001b0 1710                      	CP		TEMP2, TEMP1														; Find matching Table value
0001b1 f408                      	BRSH	TRAJECTORY_COMPILER_BREAK_OFFSET_END								; ^
                                 
0001b2 cffb                      	RJMP	TRAJECTORY_COMPILER_BREAK_OFFSET_LOOP
                                 
                                 TRAJECTORY_COMPILER_BREAK_OFFSET_END:
                                 
0001b3 9731                      	SBIW	ZH:ZL, 1															; Decrement Z Pointer
0001b4 9124                      	LPM		TEMP3, Z															; Load value of Z Pointer															
                                 
0001b5 940e 021f                 	CALL	TELEGRAM_RESET														; Reset Telegram due to Z Pointer
                                 
0001b7 9508                      	RET																			; Return
                                 
                                 TRAJECTORY_COMPILER_END:
                                 
0001b8 ef0f                      	SER		TEMP1																; Store 0xFFFF into trajectory in SRAM
0001b9 930d                      	ST		X+, TEMP1															; ^
0001ba 930c                      	ST		X, TEMP1															; ^
                                 	
0001bb 2d02
0001bc 6100
0001bd 2e20                      	SFLG	MTFLG, TJRDY
                                 
0001be c000                      	RJMP	TRAJECTORY_ESC	
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > RUN
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 
                                 TRAJECTORY_ESC:
                                 
0001bf 9508                      	RET																			; Return
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> AUTONOMOUS MODE
                                 
                                 	// Placeholder
                                 	// ...
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> BROADCAST
                                 
                                 BROADCAST:
                                 	
0001c0 fe14                      	SBRS	FNFLG, TMR1															; Check if broadcast is synchronized with CLOCK (Timer1)
0001c1 9508                      	RET																			; ^
                                 	
0001c2 e300                      	LDI		TEMP1, (1<<BROD2)|(1<<BROD1)										; Mask Broadcast Modes
0001c3 2100                      	AND		TEMP1, MDFLG														; ^
                                 
0001c4 3100                      	CPI		TEMP1, (1<<BROD1)													; Tachometer Mode		= (011)
0001c5 f031                      	BREQ	BROADCAST_TACHOMETER												; ^
                                 	
0001c6 3300                      	CPI		TEMP1, (1<<BROD2)|(1<<BROD1)										; Finishline Mode		= (111)
0001c7 f091                      	BREQ	BROADCAST_FINISHLINE												; ^
                                 
0001c8 3200                      	CPI		TEMP1, (1<<BROD2)													; Accelerometer Mode	= (101)
0001c9 f059                      	BREQ	BROADCAST_ACCELEROMETER												; ^
                                 
0001ca d014                      	RCALL	BROADCAST_ALL														; Broadcast All			= (001)
                                 
0001cb 9508                      	RET																			; Return
                                 
                                 BROADCAST_TACHOMETER:
                                 
0001cc 9150 0060                 	LDS		TXREG, TACHOMETER_H													; Load & transmit HIGH byte of Tachometer data
0001ce 940e 01f1                 	CALL	SERIAL_WRITE														; ^
                                 
0001d0 9150 0061                 	LDS		TXREG, TACHOMETER_L													; Load & transmit HIGH byte of Tachometer data
0001d2 940e 01f1                 	CALL	SERIAL_WRITE														; ^
                                 
0001d4 9508                      	RET																			; Return
                                 
                                 BROADCAST_ACCELEROMETER:
                                 
0001d5 9150 0073                 	LDS		TXREG, ACCELEROMETER												; Load & transmit Accelerometer data
0001d7 940e 01f1                 	CALL	SERIAL_WRITE														; ^
                                 
0001d9 9508                      	RET																			; Return
                                 
                                 BROADCAST_FINISHLINE:
                                 	
0001da 9150 0070                 	LDS		TXREG, FINISHLINE													; Load & transmit Finishline data
0001dc 940e 01f1                 	CALL	SERIAL_WRITE														; ^
                                 
0001de 9508                      	RET																			; Return
                                 
                                 BROADCAST_ALL:
                                 
0001df 9100 0061                 	LDS		TEMP1, TACHOMETER_L													; Load current & recent Tachometer (LOW) value
0001e1 9110 0076                 	LDS		TEMP2, TACHOMETER_L_PREV											;
                                 
0001e3 1701                      	CP		TEMP1, TEMP2														; Compare and only transmit if value has changed
0001e4 f409                      	BRNE	BROADCAST_ALL_SEND													; ^
                                 
0001e5 9508                      	RET																			; Return
                                 
                                 BROADCAST_ALL_SEND:
                                 
0001e6 9300 0076                 	STS		TACHOMETER_L_PREV, TEMP1											; Update recent Tachometer (LOW) value
                                 
0001e8 dfe3                      	RCALL	BROADCAST_TACHOMETER												; Broadcast Tachometer
0001e9 dfeb                      	RCALL	BROADCAST_ACCELEROMETER												; Broadcast Accelerometer
                                 
0001ea 9508                      	RET																			; Return
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> COMMUNICATION PROTOCOL
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > USART
                                 
                                 SERIAL_READ:
                                 	
0001eb 9b5f                      	SBIS	UCSRA, RXC															; Wait for Recieve (RXC) Flag
0001ec cffe                      	RJMP	SERIAL_READ															; ^
                                 
0001ed b14c                      	IN		RXREG, UDR															; Read data into Reception Register
0001ee 9340 006b                 	STS		SERIAL_RX, RXREG													; Store data in SRAM
                                 
0001f0 9508                      	RET																			; Return
                                 
                                 SERIAL_WRITE:
                                 	
0001f1 9b5d                      	SBIS	UCSRA, UDRE															; Wait for Empty Transmit Buffer (UDRE) Flag
0001f2 cffe                      	RJMP	SERIAL_WRITE														; ^
                                 
0001f3 b95c                      	OUT		UDR, TXREG															; Write data from Transmission Register
                                 
0001f4 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > TELEGRAM PARSER
                                 
                                 	// !#!#!#!
                                 	// Needs to be changed to support recent Z pointer from SRAM!
                                 
                                 TELEGRAM_CHECK:
                                 
0001f5 9b5f                      	SBIS	UCSRA, RXC															; Return if no data in USART reception buffer
0001f6 9508                      	RET																			; ^
                                 
0001f7 b14c                      	IN		RXREG, UDR															; Read data into Reception Register
0001f8 9340 006b                 	STS		SERIAL_RX, RXREG													; Store data in SRAM
                                 
                                 TELEGRAM_PARSER:
                                 	
0001fa 9100 0066                 	LDS		TEMP1, TEL_STEP														; Load, increment & store Telegram Step Counter
0001fc 9503                      	INC		TEMP1																; ^
0001fd 9300 0066                 	STS		TEL_STEP, TEMP1														; ^
                                 
0001ff 3001                      	CPI		TEMP1, 1															; Setup Telegram Parser if Step = 1
000200 f041                      	BREQ	TELEGRAM_PARSE_SETUP												; ^
                                 
000201 3004                      	CPI		TEMP1, 4															; Execute Telegram if Step = 4
000202 f089                      	BREQ	TELEGRAM_EXECUTE													; ^
                                 
000203 3002                      	CPI		TEMP1, 2															; Parse (TYPE) if Step = 2
000204 f041                      	BREQ	TELEGRAM_JUMP														; ^
                                 
000205 95ea                      	DEC		ZL																	; Offset Z pointer (-1) to parse TYPE (0x00_XX)
                                 
000206 3003                      	CPI		TEMP1, 3															; Parse (COMMAND) if Step = 3
000207 f029                      	BREQ	TELEGRAM_JUMP														; ^
                                 
                                 TELEGRAM_PARSER_ESC:
                                 	
000208 9508                      	RET
                                 
                                 TELEGRAM_PARSE_SETUP:
                                 
000209 e0f0                      	LDI		ZH, HIGH(COMMANDS*2)												; Reset Z Pointer to COMMANDS jump table
00020a e5e0                      	LDI 	ZL,  LOW(COMMANDS*2)												; ^
                                 
00020b 95e3                      	INC		ZL																	; Offset Z pointer (+1) to parse COMMAND (0xXX_00)
                                 
00020c cfed                      	RJMP	TELEGRAM_PARSER														; Return
                                 
                                 TELEGRAM_JUMP:
                                 
00020d 9634                      	ADIW	ZH:ZL, 4															; Increment Z Pointer (by 4)
                                 
00020e 9104                      	LPM		TEMP1, Z															; Load the matching duty cycle
                                 
00020f 3e0e                      	CPI		TEMP1, 0xEE															; Reset everything if out of table bounds
000210 f0b1                      	BREQ	TELEGRAM_ERROR														; ^
                                 
000211 1704                      	CP		TEMP1, RXREG														; Find match in jump table
000212 f3a9                      	BREQ	TELEGRAM_PARSER_ESC													; ^
                                 
000213 cff9                      	RJMP	TELEGRAM_JUMP														; Repeat
                                 
                                 TELEGRAM_EXECUTE:
                                 
000214 9632                      	ADIW	ZH:ZL, 2															; Point at & read LOW of Table address
000215 9104                      	LPM		TEMP1, Z															; ^
                                 
000216 9631                      	ADIW	ZH:ZL, 1															; Point at & read HIGH of Table address
000217 9114                      	LPM		TEMP2, Z															; ^
                                 
000218 2fe0                      	MOV		ZL, TEMP1															; Load Z Pointer
000219 2ff1                      	MOV		ZH, TEMP2															; ^
                                 
00021a 9340 0068                 	STS		RECENT_DAT, RXREG													; Store recieved data in SRAM
                                 
                                 	;MOV		TEMP1, FNFLG														; Set CMDPD flag
                                 	;SBR		TEMP1, (1<<CMDPD)													; ^
                                 	;MOV		FNFLG, TEMP1														; ^
                                 
00021c 2d01
00021d 6008
00021e 2e10                      	SFLG	FNFLG, CMDPD														; Set CMDPD flag in FNFLG
                                 
                                 TELEGRAM_RESET:
                                 	
00021f 2700                      	CLR		TEMP1																; Reset & store parse step counter
000220 9300 0066                 	STS		TEL_STEP, TEMP1														; ^
                                 
000222 9508                      	RET																			; Return
                                 
                                 TELEGRAM_CLRBUFFER:
                                 
000223 b10c                      	IN		TEMP1, UDR															; Empty buffer
000224 995f                      	SBIC	UCSRA, RXC															; ^
000225 cffd                      	RJMP	TELEGRAM_CLRBUFFER													; ^
                                 
000226 9508                      	RET																			; Return
                                 
                                 TELEGRAM_ERROR:
                                 
000227 2744                      	CLR		RXREG																; Clear reception register
                                 
                                 	;MOV		TEMP1, FNFLG														; Clear CMDPD flag
                                 	;CBR		TEMP1, (1<<CMDPD)													; ^
                                 	;MOV		FNFLG, TEMP1														; ^
                                 
000228 2d01
000229 7f07
00022a 2e10                      	CFLG	FNFLG, CMDPD														; Clear CMDPD flag in FNFLG
                                 
00022b dff3                      	RCALL	TELEGRAM_RESET														; Reset parse step counter
00022c dff6                      	RCALL	TELEGRAM_CLRBUFFER													; Clear reception buffer
                                 	
00022d 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > COMMANDS
                                 
                                 EXECUTE_COMMAND:
                                 	
                                 	;MOV		TEMP1, FNFLG														; Clear CMDPD flag
                                 	;CBR		TEMP1, (1<<CMDPD)													; ^
                                 	;MOV		FNFLG, TEMP1														; ^
                                 
00022e 2d01
00022f 7f07
000230 2e10                      	CFLG	FNFLG, CMDPD														; Clear CMDPD flag in FNFLG
                                 
000231 9509                      	ICALL																		; Call function (address) of Z-pointer
                                 
000232 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 
                                 BROADCAST_SET:
                                 
000233 2d00                      	MOV		TEMP1, MDFLG														; Load & reset current Broadcast Flags in Mode Register
000234 7c07                      	ANDI	TEMP1, 0b11000111													; ^
                                 
000235 9110 0068                 	LDS		TEMP2, RECENT_DAT													; Load & apply recieved Broadcast Flags
000237 2b01                      	OR		TEMP1, TEMP2														; ^
                                 
000238 2e00                      	MOV		MDFLG, TEMP1														; Save new mode flags
000239 9200 006f                 	STS		MODE_FLG, MDFLG														; Store new mode flags to SRAM
                                 
00023b 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 
                                 MAPPING_SET:
                                 
00023c 2d00
00023d 6400
00023e 2e00                      	SFLG	MDFLG, MAP															; Set MAP flag in MDFLG
                                 
00023f 9200 006f                 	STS		MODE_FLG, MDFLG														; Store new mode flags to SRAM
                                 
000241 e30a                      	LDI		TEMP1, MAPPING_SEEK_PWM												; Start vehicle with mapping seek PWM
000242 9300 0068                 	STS		RECENT_DAT, TEMP1													; ^	
000244 940e 0268                 	CALL	SET_MOTOR_PWM														; ^
                                 
000246 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 
                                 TRAJECTORY_SET:
                                 
000247 940e 0164                 	CALL	TRAJECTORY_COMPILER_SETUP											; Compile Trajectory
                                 
000249 9508                      	RET
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 
                                 MAPPING_GET:
                                 
                                 	// If MAPP > 512 bytes, then buffer will overflow in MatLab
                                 	
00024a e0d2                      	LDI		YH, HIGH(MAPP_TABLE)												; Initialize Y Pointer
00024b e0c0                      	LDI		YL,  LOW(MAPP_TABLE)												; ^
                                 
                                 MAPPING_GET_LOOP:
                                 
00024c 9109                      	LD		TEMP1, Y+															; Load mapping values (HIGH & LOW)
00024d 9119                      	LD		TEMP2, Y+															; ^
                                 
00024e 2f50                      	MOV		TXREG, TEMP1														; Transmit HIGH byte of mapping
00024f 940e 01f1                 	CALL	SERIAL_WRITE														; ^
                                 
000251 2f51                      	MOV		TXREG, TEMP2														; Transmit LOW byte of mapping
000252 940e 01f1                 	CALL	SERIAL_WRITE														; ^
                                 
000254 3f0f                      	CPI		TEMP1, 0xFF															; Escape if EoT has been reached
000255 f009                      	BREQ	MAPPING_GET_ESC														; ^
                                 
000256 cff5                      	RJMP	MAPPING_GET_LOOP													; Loop
                                 
                                 MAPPING_GET_ESC:
                                 
000257 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 
                                 TRAJECTORY_GET:
                                 
                                 	// If TRAJS > 512 bytes, then buffer will overflow in MatLab
                                 	
000258 940e 0164                 	CALL	TRAJECTORY_COMPILER_SETUP											; Compile Trajectory
                                 	
00025a e0d3                      	LDI		YH, HIGH(TRAJ_TABLE)												; Initialize Y Pointer
00025b e0c0                      	LDI		YL,  LOW(TRAJ_TABLE)												; ^
                                 
                                 TRAJECTORY_GET_LOOP:
                                 
00025c 9109                      	LD		TEMP1, Y+															; Load mapping values (HIGH & LOW)
00025d 9119                      	LD		TEMP2, Y+															; ^
                                 
00025e 2f50                      	MOV		TXREG, TEMP1														; Transmit HIGH byte of mapping
00025f 940e 01f1                 	CALL	SERIAL_WRITE														; ^
                                 
000261 2f51                      	MOV		TXREG, TEMP2														; Transmit LOW byte of mapping
000262 940e 01f1                 	CALL	SERIAL_WRITE														; ^
                                 
000264 3f0f                      	CPI		TEMP1, 0xFF															; Escape if EoT has been reached
000265 f009                      	BREQ	TRAJECTORY_GET_ESC													; ^
                                 
000266 cff5                      	RJMP	TRAJECTORY_GET_LOOP													; Loop
                                 
                                 TRAJECTORY_GET_ESC:
                                 
000267 9508                      	RET																			; Return
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> DEVICE (RACECAR) CONTROL
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > MOTOR CONTROL
                                 
                                 SET_MOTOR_PWM:
                                 
000268 e60a                      	LDI		TEMP1, 0x6A															; Initialize Waveform Generator (Timer2) (0110_1010)
000269 bd05                      	OUT		TCCR2, TEMP1														; ^
                                 
00026a 9120 0068                 	LDS		TEMP3, RECENT_DAT													; Load recent recieved telegram data from SRAM
00026c 9320 006d                 	STS		DUTY_CYCLE, TEMP3													; Store loaded Duty Cycle in SRAM
                                 	
00026e 2322                      	TST		TEMP3																; Check if recieved Duty Cycle is 0
00026f f029                      	BREQ	SET_MOTOR_BREAK														; Break vehicle if true
                                 
000270 9894                      	CBI		PORTD, PD4															; Disable MOSFET Brake
                                 
000271 940e 02e6                 	CALL	DELAY_100uS															; Wait for 100 ?s
                                 
000273 bd23                      	OUT		OCR2, TEMP3															; Set Duty Cycle (PWM) (0-255) on Timer2
                                 
                                 SET_MOTOR_PWM_ESC:
                                 
000274 9508                      	RET																			; Return
                                 
                                 SET_MOTOR_BREAK:
                                 
000275 e000                      	LDI		TEMP1, 0x00															; Disable Timer2 (PWM)
000276 bd05                      	OUT		TCCR2, TEMP1														; ^
                                 
000277 9897                      	CBI 	PORTD, PD7															; Clear PD7 of PORTD
                                 		
000278 940e 02e6                 	CALL	DELAY_100uS															; Wait for 100 us
                                 
00027a 9a94                      	SBI		PORTD, PD4															; Enable MOSFET Brake
                                 
00027b cff8                      	RJMP	SET_MOTOR_PWM_ESC													; Return
                                 
                                 SET_MOTOR_MAX:
                                 
00027c 9a97                      	SBI 	PORTD, PD7															; Set PD7 of PORTD
00027d cff6                      	RJMP	SET_MOTOR_PWM_ESC													; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > MOVING AVERAGE
                                 
                                 	// !#!#!#!
                                 	// Needs to be changed to support an arbitrary SRAM Location!
                                 
                                 MOVAVG:
                                 
00027e 91b0 0071                 	LDS		XH, MOVAVG_RECENT_XH												; Load recent MOVAVG X pointer
000280 91a0 0072                 	LDS		XL, MOVAVG_RECENT_XL												; ^
                                 
000282 9100 0064                 	LDS		TEMP1, ADC_H														; Insert ADC_val from high because of ADLAR
000284 930d                      	ST		X+, TEMP1															; Save ADC_H to SRAM pointer X
                                 
000285 34a0                      	CPI		XL, MOVAVG_SIZE														;
                                 	//CPI		XL, LOW(MOVAVG_TABLE_END)										; Check if Pointer should be reset
000286 f409                      	BRNE	MOVAVG_SKIP_RESET													; ^
                                 	//CPI		XH, HIGH(MOVAVG_TABLE_END)										; Check if Pointer should be reset
                                 	//BRNE	MOVAVG_SKIP_RESET													; ^
000287 d005                      	RCALL	MOVAVG_POINTER_RESET												; ^
                                 
                                 MOVAVG_SKIP_RESET:
                                 	
                                 	//STS		MOVAVG_RECENT_XH, XH												; - skal med
000288 93a0 0072                 	STS		MOVAVG_RECENT_XL, XL												; -
                                 
00028a d00e                      	RCALL	MOVAVG_ADD															; Do Moving Average Addition
00028b d018                      	RCALL	MOVAVG_DIVIDE														; Do Moving Average Division
                                 
00028c 9508                      	RET																			; Return
                                 
                                 MOVAVG_POINTER_RESET:
                                 
00028d e0b1                      	LDI		XH, HIGH(MOVAVG_TABLE)												; Load reset values into X Pointer
00028e e0a0                      	LDI		XL,  LOW(MOVAVG_TABLE)												; ^
                                 
00028f 9508                      	RET																			; Return
                                 
                                 MOVAVG_SRAM_SETUP:
                                 
000290 e400                      	LDI		TEMP1, MOVAVG_SIZE													; Load size of Moving Average filter into register
                                 
000291 93b0 0071                 	STS		MOVAVG_RECENT_XH, XH												; Store location of X pointer into SRAM
000293 93a0 0072                 	STS		MOVAVG_RECENT_XL, XL												; ^
                                 
                                 MOVAVG_SRAM_SETUP_LOOP:
                                 	
000295 930d                      	ST		X+, TEMP1															; Set all values of SRAM to default value
                                 
000296 34a0                      	CPI		XL, LOW(MOVAVG_TABLE_END)											; Check if reached end of table.
000297 f7e9                      	BRNE	MOVAVG_SRAM_SETUP_LOOP												; ^
                                 	//CPI	XH, HIGH(MOVAVG_TABLE_END)						16BIT COMPARE!! CPC	; Check if reached end of table.
                                 	//BRNE	MOVAVG_SRAM_SETUP_LOOP												; ^
                                 
000298 9508                      	RET																			; Return
                                 
                                 MOVAVG_ADD:
                                 	
000299 2700                      	CLR		TEMP1																; Reset Temporary Register
00029a 2711                      	CLR		TEMP2																; ^
00029b 2722                      	CLR		TEMP3																; ^
                                 
00029c dff0                      	RCALL	MOVAVG_POINTER_RESET												; Reset X Pointer
                                 
                                 MOVAVG_ADD_LOOP:
                                 	
00029d 910d                      	LD		TEMP1, X+ 															; Load value from X pointer location.
00029e 0f10                      	ADD		TEMP2, TEMP1														; Add values
                                 
                                 	// Can be changed to SBIC, SREG ..
                                 	
                                 	//SBRC	SREG, 0
00029f f408                      	BRCC	MOVAVG_ADD_SKIP_CARRY												; Branch if carry is not set - skal slettes
0002a0 9523                      	INC		TEMP3																; ^
                                 
                                 MOVAVG_ADD_SKIP_CARRY:															;skal slettes!
                                 	
0002a1 34a0                      	CPI		XL, LOW(MOVAVG_TABLE_END)											; Check if reached end of table
0002a2 f7d1                      	BRNE	MOVAVG_ADD_LOOP														; 
                                 	//CPI		XH, HIGH(MOVAVG_TABLE_END) THIS IS WRONG SHOULD BE CPC 16bit if ever moved!
                                 	//BRNE	MOVAVG_ADD_LOOP
                                 
0002a3 9508                      	RET																			; Return
                                 
                                 MOVAVG_DIVIDE:
                                 
0002a4 e006                      	LDI		TEMP1, MOVAVG_DIVS													; Load number of Divisions
                                 
                                 MOVAVG_DIVIDE_LOOP:
                                 
0002a5 9525                      	ASR		TEMP3																; TEMP3 IS HIGH
0002a6 9517                      	ROR		TEMP2																; TEMP2 IS LOW
                                 
0002a7 950a                      	DEC		TEMP1																; Perform 16 bit divison until done
0002a8 f7e1                      	BRNE	MOVAVG_DIVIDE_LOOP													; ^
                                 
0002a9 9310 0073                 	STS		ACCELEROMETER, TEMP2												; Save value of division into SRAM
                                 
0002ab 9508                      	RET
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> CONTROL UNIT
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > FLAGS
                                 
                                 LOAD_FLAGS:
                                 	
0002ac 94f8                      	CLI																			; Disable Interrupts
                                 
0002ad 9100 006e                 	LDS		TEMP1, FUNC_FLG														; Merge SRAM Function Flags from SRAM with Register Function Flags
0002af 2a10                      	OR		FNFLG, TEMP1														; ^
                                 
0002b0 2700                      	CLR		TEMP1																; Reset SRAM Function Flags
0002b1 9300 006e                 	STS		FUNC_FLG, TEMP1														; ^
                                 
0002b3 9478                      	SEI																			; Enable Interrupts
                                 
0002b4 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > CLOCK
                                 
                                 CLOCK:
                                 
0002b5 0000                      	NOP																			; Do Something
                                 
                                 	;MOV		TEMP1, FNFLG														; Clear TMR1 flag
                                 	;CBR		TEMP1,  (1<<TMR1)													; ^
                                 	;MOV		FNFLG, TEMP1														; ^
                                 
0002b6 2d01
0002b7 7e0f
0002b8 2e10                      	CFLG	FNFLG, TMR1															; Clear TMR1 flag in FNFLG
                                 
0002b9 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > DEBUGGING
                                 
                                 EMPTY:
0002ba 0000                      	NOP
0002bb 9508                      	RET
                                 
                                 TEST:
                                 
0002bc e30c                      	LDI		TEMP1, 60
0002bd 9300 0068                 	STS		RECENT_DAT, TEMP1
                                 
0002bf 940e 0268                 	CALL	SET_MOTOR_PWM
0002c1 940e 02d4                 	CALL	DELAY
0002c3 940e 0275                 	CALL	SET_MOTOR_BREAK
0002c5 940e 02d4                 	CALL	DELAY
                                 
0002c7 9508                      	RET
                                 
                                 TEST35:
                                 	
0002c8 e355                      	LDI		TXREG, 0x35
0002c9 940e 01f1                 	CALL	SERIAL_WRITE
                                 	
0002cb 9508                      	RET
                                 
                                 TEST40:
                                 	
0002cc e450                      	LDI		TXREG, 0x40
0002cd 940e 01f1                 	CALL	SERIAL_WRITE
                                 	
0002cf 9508                      	RET
                                 
                                 TEST45:
                                 	
0002d0 e455                      	LDI		TXREG, 0x45
0002d1 940e 01f1                 	CALL	SERIAL_WRITE
                                 	
0002d3 9508                      	RET
                                 
                                 DELAY:
0002d4 e604                          LDI		TEMP1, 100
                                 LOOP3:
0002d5 e614                      	LDI		TEMP2, 100
                                 LOOP2:
0002d6 e624                      	LDI		TEMP3, 100
                                 LOOP1:
0002d7 952a                          DEC		TEMP3
0002d8 f7f1                          BRNE	LOOP1
0002d9 951a                          DEC		TEMP2
0002da f7d9                          BRNE	LOOP2
0002db 950a                          DEC		TEMP1
0002dc f7c1                          BRNE	LOOP3
                                 
0002dd 9508                          RET
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > 10ms DELAY
                                 
                                 DELAY_10MS:
                                 
0002de ed00                          LDI		TEMP1, 208
0002df ec1a                          LDI		TEMP2, 202
                                 
                                 DELAY_10MS_LOOP:
                                 
0002e0 951a                      	DEC		TEMP2
0002e1 f7f1                          BRNE	DELAY_10MS_LOOP
0002e2 950a                          DEC		TEMP1
0002e3 f7e1                          BRNE	DELAY_10MS_LOOP
0002e4 0000                          NOP
                                 
0002e5 9508                      	RET
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > 100us DELAY
                                 
                                 DELAY_100uS:
                                 
0002e6 e003                          LDI  TEMP1, 3
0002e7 e113                          LDI  TEMP2, 19
                                 
                                 DELAY_100uS_LOOP:
                                 	
0002e8 951a                      	DEC  TEMP2
0002e9 f7f1                          BRNE DELAY_100US_LOOP
0002ea 950a                          DEC  TEMP1
0002eb f7e1                          BRNE DELAY_100US_LOOP
                                 
0002ec 9508                      	RET
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> INTERRUPT HANDLERS
                                 
                                 INT0_HANDLER:
                                 	
0002ed 9130 006e                 	LDS		TEMPI, FUNC_FLG														; Load Function Flags from SRAM into Temporary Interrupt Register
0002ef 9468                      	SET																			; Set T flag
0002f0 f937                      	BLD		TEMPI, TACHO														; Set BIT in Temporary Interrupt Register
0002f1 9330 006e                 	STS		FUNC_FLG, TEMPI														; Store Function Flags to SRAM
                                 
0002f3 9518                      	RETI																		; Return
                                 
                                 INT1_HANDLER:
                                 	
0002f4 9130 006e                 	LDS		TEMPI, FUNC_FLG														; Load Function Flags from SRAM into Temporary Interrupt Register
0002f6 9468                      	SET																			; Set T flag
0002f7 f936                      	BLD		TEMPI, FNLNE														; Set BIT in Temporary Interrupt Register
0002f8 9330 006e                 	STS		FUNC_FLG, TEMPI														; Store Function Flags to SRAM
                                 
0002fa 9518                      	RETI																		; Return
                                 
                                 TMR1_HANDLER:
                                 	
0002fb 9130 006e                 	LDS		TEMPI, FUNC_FLG														; Load Function Flags from SRAM into Temporary Interrupt Register
0002fd 9468                      	SET																			; Set T flag
0002fe f934                      	BLD		TEMPI, TMR1															; Set BIT in Temporary Interrupt Register
0002ff 9330 006e                 	STS		FUNC_FLG, TEMPI														; Store Function Flags to SRAM
                                 
000301 9518                      	RETI																		; Return
                                 
                                 ADC_HANDLER:
                                 
000302 9130 006e                 	LDS		TEMPI, FUNC_FLG														; Load Function Flags from SRAM into Temporary Interrupt Register
000304 9468                      	SET																			; Set T flag
000305 f935                      	BLD		TEMPI, ACCLR														; Set BIT in Temporary Interrupt Register
000306 9330 006e                 	STS		FUNC_FLG, TEMPI														; Store Function Flags to SRAM		
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32" register use summary:
x  :  11 y  :  21 z  :   5 r0 :  15 r1 :  26 r2 :  22 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 205 r17:  52 r18:  15 r19:  12 r20:   8 
r21:  13 r22:   0 r23:   0 r24:  19 r25:  20 r26:   8 r27:   4 r28:   6 
r29:   6 r30:  10 r31:   8 
Registers used: 20 out of 35 (57.1%)

"ATmega32" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   1 adiw  :   6 and   :   1 
andi  :   1 asr   :   1 bclr  :   0 bld   :   4 brbc  :   0 brbs  :   0 
brcc  :   1 brcs  :   0 break :   0 breq  :  14 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 brlt  :   0 brmi  :   0 
brne  :  13 brpl  :   0 brsh  :   3 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  35 cbi   :   3 cbr   :  13 
clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  15 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   4 cpc   :   1 
cpi   :  20 cpse  :   0 dec   :   9 eor   :   1 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   1 ijmp  :   0 in    :   5 inc   :   4 jmp   :   5 
ld    :  15 ldd   :   0 ldi   :  55 lds   :  36 lpm   :  10 lsl   :   0 
lsr   :   0 mov   :  42 movw  :   1 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   6 or    :   2 ori   :   1 out   :  22 pop   :   0 
push  :   0 rcall :  12 ret   :  46 reti  :   4 rjmp  :  32 rol   :   0 
ror   :   1 sbc   :   2 sbci  :   1 sbi   :   7 sbic  :   1 sbis  :   3 
sbiw  :   6 sbr   :   7 sbrc  :  17 sbrs  :   4 sec   :   0 seh   :   0 
sei   :   2 sen   :   0 ser   :   2 ses   :   0 set   :   4 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  16 std   :   0 sts   :  54 
sub   :   3 subi  :   0 swap  :   0 tst   :   1 wdr   :   0 
Instructions used: 56 out of 113 (49.6%)

"ATmega32" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000612   1410     84   1494   32768   4.6%
[.dseg] 0x000060 0x000060      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
