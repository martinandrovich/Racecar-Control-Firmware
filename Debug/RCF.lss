
AVRASM ver. 2.2.7  C:\Users\Martin Androvich\Desktop\Personal Files\Education\Robotics [SDU]\Courses\2. Semester\RB-PRO2\RCF\Racecar-Control-Firmware\main.asm Sun Apr 22 02:56:57 2018

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m32def.inc'
C:\Users\Martin Androvich\Desktop\Personal Files\Education\Robotics [SDU]\Courses\2. Semester\RB-PRO2\RCF\Racecar-Control-Firmware\main.asm(33): Including file 'C:\Users\Martin Androvich\Desktop\Personal Files\Education\Robotics [SDU]\Courses\2. Semester\RB-PRO2\RCF\Racecar-Control-Firmware\ram_table.inc'
C:\Users\Martin Androvich\Desktop\Personal Files\Education\Robotics [SDU]\Courses\2. Semester\RB-PRO2\RCF\Racecar-Control-Firmware\main.asm(34): Including file 'C:\Users\Martin Androvich\Desktop\Personal Files\Education\Robotics [SDU]\Courses\2. Semester\RB-PRO2\RCF\Racecar-Control-Firmware\command_table.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m32def.inc'
C:\Users\Martin Androvich\Desktop\Personal Files\Education\Robotics [SDU]\Courses\2. Semester\RB-PRO2\RCF\Racecar-Control-Firmware\main.asm(33): Including file 'C:\Users\Martin Androvich\Desktop\Personal Files\Education\Robotics [SDU]\Courses\2. Semester\RB-PRO2\RCF\Racecar-Control-Firmware\ram_table.inc'
C:\Users\Martin Androvich\Desktop\Personal Files\Education\Robotics [SDU]\Courses\2. Semester\RB-PRO2\RCF\Racecar-Control-Firmware\main.asm(34): Including file 'C:\Users\Martin Androvich\Desktop\Personal Files\Education\Robotics [SDU]\Courses\2. Semester\RB-PRO2\RCF\Racecar-Control-Firmware\command_table.inc'
                                 
                                 ; ###################################################################################################################################################
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m32def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega32
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega32
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M32DEF_INC_
                                 #define _M32DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega32
                                 #pragma AVRPART ADMIN PART_NAME ATmega32
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	OCR0	= 0x3c
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	OCDR	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDTOE	= 4	; RW
                                 .equ	WDDE	= WDTOE	; For compatibility
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF2	= 5	; External Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - General Interrupt Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 1
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                                 .equ	ADFR	= ADATE	; For compatibility
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PUD	= 2	; Pull-up Disable
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write secion read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler bits
                                 .equ	TWPS1	= 1	; TWI Prescaler bits
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x085f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                                 
                                 #endif  /* _M32DEF_INC_ */
                                 
                                 
                                 ; Racecar Control Firmware
                                 ; Version 1.1.1
                                 ; 
                                 ; Sequential Flag Architecture
                                 
                                 ; ___________________________________________________________________________________________________________________________________________________
                                 ; >> VECTORS:
                                 
                                 .ORG	0x00																	; Reset Vector
000000 940c 003c                 	JMP		INIT																; ^
                                 
                                 .ORG 	0x02																	; INT0 Interrupt (PD2)
000002 940c 0199                 	JMP		INT0_HANDLER														; ^
                                 
                                 .ORG	0x04																	; INT1 Interrupt (PD3)
000004 940c 01a0                 	JMP 	INT1_HANDLER														; ^
                                 
                                 .ORG	0x14																	; TIMER1 Compare Match Interrupt
000014 940c 01a7                 	JMP		TMR1_HANDLER														; ^
                                 
                                 .ORG	0x20																	; ADC Conversion Complete Interrupt
000020 940c 01ae                 	JMP		ADC_HANDLER															; ^
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> DEFINITIONS
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > INCLUDES
                                 
                                 .ORG	0x28
                                 
                                 	.INCLUDE	"ram_table.inc"
                                 
                                 ; >> RAM TABLE :
                                 
                                 .EQU	TACHOMETER_H					= 0x0060
                                 .EQU	TACHOMETER_L					= 0x0061
                                 
                                 .EQU	COMDATA_H						= 0x0062
                                 .EQU	COMDATA_L						= 0x0063
                                 
                                 .EQU	ADC_H							= 0x0064
                                 .EQU	ADC_L							= 0x0065
                                 
                                 .EQU	TEL_STEP						= 0x0066
                                 
                                 .EQU	RECENT_CMD						= 0x0067
                                 .EQU	RECENT_DAT						= 0x0068
                                 
                                 .EQU	DATA_H							= 0x0069
                                 .EQU	DATA_L							= 0x006A
                                 
                                 .EQU	SERIAL_RX						= 0x006B
                                 .EQU	SERIAL_TX						= 0x006C
                                 
                                 .EQU	DUTY_CYCLE						= 0x006D
                                 
                                 .EQU	FUNC_FLG						= 0x006E
                                 .EQU	MODE_FLG						= 0x006F
                                 
                                 .EQU	FINISHLINE						= 0x0070
                                 
                                 .EQU	MOVAVG_RECENT_XH				= 0x0071
                                 .EQU	MOVAVG_RECENT_XL				= 0x0071
                                 
                                 .EQU	ACCELEROMETER					= 0x0073
                                 
                                 ; ___________________________________________________________________________________________________________________________________________________
                                 ; >> MOVAVG		:					; 32 values in the moving avg filter
                                 
                                 .EQU	MOVAVG_TABLE					= 0x0100
                                 
                                 ; ___________________________________________________________________________________________________________________________________________________
                                 ; >> MAPPING_START	:					; 128 values in the moving avg filter, does not have to take care of HIGH bit on ZH when first passed to ZH
                                 
                                 .EQU	MAPP							= 0x0200
                                 
                                 ; ___________________________________________________________________________________________________________________________________________________
                                 ; >> Tracjectory	:					; 1024 values in the moving avg filter
                                 
                                 	.INCLUDE	"command_table.inc"
                                 
                                 	;DW		0xTYP_00, 0										; Explanation
                                 	;  DW	  0x00_CMD, FUNC_ADDRESS						; ^
                                 
000028 aa00
000029 0000                      	.DW		0xAA_00, 0										; >> GET
00002a 0003
00002b 0181                      	  .DW	  0x00_03, EMPTY									; DATA3
00002c 0012
00002d 0181                      	  .DW	  0x00_12, EMPTY									; VAR1
                                 
00002e 5500
00002f 0000                      	.DW		0x55_00, 0										; >> SET
000030 0010
000031 0134                      	  .DW	  0x00_10, SET_MOTOR_PWM							; START
000032 0011
000033 0181                      	  .DW	  0x00_11, EMPTY									; STOP
000034 0012
000035 0181                      	  .DW	  0x00_12, EMPTY									; AUTO
000036 0013
000037 0181                      	  .DW	  0x00_13, EMPTY									; MAPP
000038 0014
000039 00e1                      	  .DW	  0x00_14, BROADCAST_SET							; BROD
                                 
00003a eeee
00003b 0000                      
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > CONSTANTS
                                 
                                 	.EQU	BAUDRATE	= 0x00CF												; Baudrate configuration (default = 0xCF)
                                 
                                 	.EQU	TMR1FREQ	= 976 - 1												; Timer1 configuration
                                 
                                 																				; 62500 - 1		= 4Hz
                                 																				; 31250 - 1		= 8Hz
                                 																				; 15625 - 1		= 16Hz
                                 																				;  7812 - 1		= 32Hz
                                 																				;  1953 - 1		= 128Hz
                                 																				;   976 - 1		= 256Hz
                                 																				;   488 - 1		= 512Hz
                                 																				;	244 - 1		= 1024Hz
                                 																				;	122 - 1		= 2048Hz
                                 																				;	 61 - 1		= 4096Hz
                                 
                                 	; Moving Average Filter
                                 	
                                 	.EQU	MOVAVG_SIZE				= 128										; Size (bytes) of Moving Average Filter
                                 	.EQU	MOVAVG_DIVS				= 7											; Number of division to perform (2^5 = 32)
                                 	.EQU	MOVAVG_TABLE_END		= MOVAVG_TABLE + MOVAVG_SIZE				;
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > REGISTERS
                                 
                                 	.DEF	MDFLG		= R0													; Mode Flags for Interrupts
                                 	.DEF	FNFLG		= R1													; Function Flags for Interrupts
                                 	
                                 	.DEF	TEMP1		= R16													; Temporary Register #1
                                 	.DEF	TEMP2		= R17													; Temporary Register #2
                                 	.DEF	TEMP3		= R18													; Temporary Register #3
                                 	.DEF	TEMPI		= R19													; Temporary Interrupts Register
                                 	
                                 	.DEF	TEMPWH		= R25													; Temporary Register (Word) Pair
                                 	.DEF	TEMPWL		= R24													; ^
                                 		
                                 	.DEF	RXREG		= R20													; USART Reception Register
                                 	.DEF	TXREG		= R21													; USART Transmission Register
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > FLAGS
                                 
                                 	; Mode Flags
                                 
                                 	.EQU	AUTO		= 7														; Autonomous Mode
                                 	.EQU	MAP			= 6														; Mapping Mode
                                 	.EQU	BROD2		= 5														; Broadcast Mode
                                 	.EQU	BROD1		= 4														; ^
                                 	.EQU	BROD0		= 3														; ^
                                 
                                 	; Function Flags
                                 
                                 	.EQU	TACHO		= 7														; Tachometer Ready
                                 	.EQU	FNLNE		= 6														; Finishline Ready
                                 	.EQU	ACCLR		= 5														; Accelerometer Ready
                                 	.EQU	TMR1		= 4														; Timer1 Ready
                                 	.EQU	CMDPD		= 3														; Command Pending
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> INITIALIZATION
                                 
                                 INIT:
                                 
                                 	; Stack Pointer
                                 
00003c e008                      	LDI 	TEMP1, HIGH(RAMEND)
00003d bf0e                      	OUT 	SPH, TEMP1
00003e e50f                      	LDI 	TEMP1,  LOW(RAMEND)
00003f bf0d                      	OUT 	SPL, TEMP1
                                 
                                 	; SRAM Initialization
                                 
000040 2700                      	CLR		TEMP1																; Initialize allocated SRAM to NULL
000041 9300 0068                 	STS		RECENT_DAT, TEMP1													; ^
000043 9300 0066                 	STS		TEL_STEP, TEMP1														; ^
000045 9300 006f                 	STS		MODE_FLG, TEMP1														; ^
000047 9300 006e                 	STS		FUNC_FLG, TEMP1														; ^
000049 9300 0060                 	STS		TACHOMETER_H, TEMP1													; ^
00004b 9300 0061                 	STS		TACHOMETER_L, TEMP1													; ^
00004d 9300 0073                 	STS		ACCELEROMETER, TEMP1												; ^
00004f 9300 0064                 	STS		ADC_H, TEMP1														; ^
000051 9300 0065                 	STS		ADC_L, TEMP1														; ^
                                 
000053 940e 0154                 	CALL	MOVAVG_POINTER_RESET
000055 940e 0157                 	CALL	MOVAVG_SRAM_SETUP
                                 
                                 	; Flags Initialization
                                 
000057 2400                      	CLR		MDFLG																; Clear Flags
000058 2411                      	CLR		FNFLG																; ^
                                 
                                 	; USART Config
                                 
000059 e000                      	LDI		TEMP1, HIGH(BAUDRATE)												; Set Transmission Rate
00005a bd00                      	OUT		UBRRH, TEMP1														; ^
00005b ec0f                      	LDI		TEMP1, LOW(BAUDRATE)												; ^
00005c b909                      	OUT		UBRRL, TEMP1														; ^
                                 
00005d e002                      	LDI		TEMP1, 0x02															; Clear all Error Flags + Enable DoubleMode
00005e b90b                      	OUT		UCSRA, TEMP1														; ^
                                 
00005f e108                      	LDI		TEMP1, (1<<RXEN)|(1<<TXEN)											; Enable Transmission & Reception
000060 b90a                      	OUT		UCSRB, TEMP1														; ^
                                 
000061 e806                      	LDI		TEMP1, (1<<URSEL)|(3<<UCSZ0)										; Set Frame Format (8, N, 1)
000062 bd00                      	OUT		UCSRC, TEMP1														; ^
                                 
000063 2744                      	CLR		RXREG																; Reset Reception Register
000064 2755                      	CLR		TXREG																; Reset Transmission Register
                                 
                                 	; ADC Config	
                                 
000065 e200                      	LDI		TEMP1, (1<<ADLAR)													; Choose -> ADC0 and AVCC. Vcc = 5V
000066 b907                      	OUT		ADMUX, TEMP1														; AUTOTRIGGER ENABLED (ADATE) otherwise it doesnt work?
                                 
000067 e80f                      	LDI		TEMP1, (1<<ADEN)|(1<<ADIE)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADPS2)			; ADEN: ENABLE ADC, ADSC: START CONVERSATION ; (1<<ADPS2)
000068 b906                      	OUT		ADCSRA, TEMP1														; ADFR: Activate Free Running Select, Prescaler: 128 // 125kHz ADC clock
                                 
000069 9a36                      	SBI		ADCSR, ADSC															; Start ADC Conversion	
                                 
                                 	; I/O (Port) Setup
                                 
00006a 9a8f                      	SBI		DDRD, PD7															; Set PD7 on PORTD as Output
00006b 9a92                      	SBI		PORTD, PD2															; Set PD2 on PORTD as Pullup Input
                                 
00006c e000                      	LDI		TEMP1, 0x00															; Set Port A as Input (is this needed?)
00006d bb0a                      	OUT		DDRA, TEMP1															; ^
                                 
                                 	; Timer1 Setup
                                 
00006e e100                      	LDI		TEMP1, (1<<OCIE1A)													; Enable Timer1 Compare Match Interrupt
00006f bf09                      	OUT		TIMSK, TEMP1														; ^
                                 
000070 e000                      	LDI		TEMP1, 0x00															; Set Default
000071 bd0f                      	OUT		TCCR1A, TEMP1														; ^
                                 
000072 e00b                      	LDI		TEMP1, (1<<CS11)|(1<<CS10)|(1<<WGM12)								; Set 64 Prescelar, CTC-MODE
000073 bd0e                      	OUT		TCCR1B, TEMP1														; ^
                                 
000074 e003                      	LDI		TEMP1, HIGH(TMR1FREQ)												; Set timer offset
000075 bd0b                      	OUT		OCR1AH, TEMP1														; ^
000076 ec0f                      	LDI		TEMP1,  LOW(TMR1FREQ)												; ^
000077 bd0a                      	OUT		OCR1AL, TEMP1														; ^
                                 
000078 e004                      	LDI		TEMP1, (1<<TOV1)													; Enable Timer1
000079 bf08                      	OUT		TIFR, TEMP1															; ^
                                 	
                                 	; Waveform Generator (Timer2)
                                 
00007a e000                      	LDI		TEMP1, 0x00															; Reset Timer2
00007b bd03                      	OUT		OCR2, TEMP1															; ^
                                 
                                 	; External Interrupt Setup
                                 
00007c e003                      	LDI		TEMP1, (1<<ISC01)|(1<<ISC00)										; Set INT0 to rising edge
00007d bf05                      	OUT		MCUCR, TEMP1														; ^
                                 
00007e e400                      	LDI 	TEMP1, (1<<INT0)													; Enable external interrupts
00007f bf0b                      	OUT 	GICR, TEMP1															; ^
                                 
000080 9478                      	SEI																			; Set global interrupt flag
                                 
000081 c000                      	RJMP	MAIN																; Start MAIN Program
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> MAIN PROGRAM
                                 
                                 MAIN:
                                 	
000082 940e 0173                 	CALL	LOAD_FLAGS															; Load Flags
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > FUNCTIONS
                                 	
000084 fc17                      	SBRC	FNFLG, TACHO														; Tachometer Ready
000085 940e 009d                 	CALL	LOG_TACHOMETER														; ^
                                 
000087 fc16                      	SBRC	FNFLG, FNLNE														; Finishline Ready
000088 940e 00aa                 	CALL	LOG_FINISHLINE														; ^
                                 
00008a fc15                      	SBRC	FNFLG, ACCLR														; Accelerometer Ready
00008b 940e 00af                 	CALL	LOG_ACCELEROMETER													; ^
                                 
00008d 940e 00f4                 	CALL	TELEGRAM_CHECK														; Check for Telegrams
                                 
00008f fc13                      	SBRC	FNFLG, CMDPD														; Command Pending
000090 940e 0131                 	CALL	EXECUTE_COMMAND														; ^
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > MODES
                                 
000092 fc07                      	SBRC	MDFLG, AUTO															; Autonomous Mode
000093 0000                      	NOP																			; ^
                                 
000094 fc06                      	SBRC	MDFLG, MAP															; Mapping Mode
000095 0000                      	NOP																			; ^
                                 
000096 fc03                      	SBRC	MDFLG, BROD0														; Broadcast Mode
000097 940e 00c0                 	CALL	BROADCAST															; ^
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > CLOCK (TIMER1)
                                 
000099 fc14                      	SBRC	FNFLG, TMR1															; Timer1 Ready
00009a 940e 017c                 	CALL	CLOCK																; ^
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > REPEAT LOOP
                                 
00009c cfe5                      	RJMP	MAIN																; Loop forever
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> SENSOR PROCESSING & LOGGING
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > TACHOMETER
                                 
                                 LOG_TACHOMETER:
                                 
00009d 9190 0060                 	LDS		TEMPWH, TACHOMETER_H												; Load previous values from SRAM
00009f 9180 0061                 	LDS		TEMPWL, TACHOMETER_L												; into WORD registers
                                 
0000a1 9601                      	ADIW	TEMPWH:TEMPWL, 1													; Increment data
                                 
0000a2 9390 0060                 	STS		TACHOMETER_H, TEMPWH												; Store new values into SRAM
0000a4 9380 0061                 	STS		TACHOMETER_L, TEMPWL												; ^
                                 
0000a6 2d01                      	MOV		TEMP1, FNFLG														; Clear Tachometer Flag
0000a7 770f                      	CBR		TEMP1, (1<<TACHO)													; ^
0000a8 2e10                      	MOV		FNFLG, TEMP1														; ^
                                 
0000a9 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > FINISH LINE
                                 
                                 LOG_FINISHLINE:
                                 
0000aa 0000                      	NOP																			; Do Something
                                 
0000ab 2d01                      	MOV		TEMP1, FNFLG														; Clear Finishline Flag
0000ac 7b0f                      	CBR		TEMP1, (1<<FNLNE)													; ^
0000ad 2e10                      	MOV		FNFLG, TEMP1														; ^
                                 
0000ae 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > ACCELEROMETER
                                 
                                 LOG_ACCELEROMETER:
                                 
0000af fe14                      	SBRS	FNFLG, TMR1															; Check if broadcast is synchronized with frequency (Timer1)
0000b0 9508                      	RET																			; ^
                                 
0000b1 b104                      	IN		TEMP1, ADCL															; Read LOW of ADC
0000b2 0000                      	NOP																			; ^
0000b3 9300 0065                 	STS		ADC_L, TEMP1														; ^
                                 
0000b5 b105                      	IN		TEMP1, ADCH															; Read HIGH of ADC
0000b6 0000                      	NOP																			; ^
0000b7 9300 0064                 	STS		ADC_H, TEMP1														; ^
                                 
0000b9 940e 0145                 	CALL	MOVAVG																; Apply Moving Average Filter
                                 
0000bb 9a36                      	SBI		ADCSR, ADSC															; Start ADC Conversion
                                 
0000bc 2d01                      	MOV		TEMP1, FNFLG														; Clear Accelerometer Flag
0000bd 7d0f                      	CBR		TEMP1, (1<<ACCLR)													; ^
0000be 2e10                      	MOV		FNFLG, TEMP1														; ^
                                 
0000bf 9508                      	RET																			; Return
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> MAPPING
                                 
                                 	// PLACEHOLDER
                                 	// ...
                                 
                                 
                                 	// 1. Compare previous Tachometer value with new -> add entry if necessary
                                 	// 2. Check for swings
                                 	// 3. Check for finishline
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> BROADCAST
                                 
                                 BROADCAST:
                                 	
0000c0 fe14                      	SBRS	FNFLG, TMR1															; Check if broadcast is synchronized with CLOCK (Timer1)
0000c1 9508                      	RET																			; ^
                                 	
0000c2 e300                      	LDI		TEMP1, (1<<BROD2)|(1<<BROD1)										; Mask Broadcast Modes
0000c3 2100                      	AND		TEMP1, MDFLG														; ^
                                 
0000c4 3100                      	CPI		TEMP1, (1<<BROD1)													; Tachometer Mode (011)
0000c5 f041                      	BREQ	BROADCAST_TACHOMETER												; ^
                                 	
0000c6 3300                      	CPI		TEMP1, (1<<BROD2)|(1<<BROD1)										; Finishline Mode (111)
0000c7 f0a1                      	BREQ	BROADCAST_FINISHLINE												; ^
                                 
0000c8 3200                      	CPI		TEMP1, (1<<BROD2)													; Accelerometer Mode (101)
0000c9 f069                      	BREQ	BROADCAST_ACCELEROMETER												; ^
                                 
0000ca d003                      	RCALL	BROADCAST_TACHOMETER												; Broadcast All
0000cb d00b                      	RCALL	BROADCAST_ACCELEROMETER												; ^
0000cc d00f                      	RCALL	BROADCAST_FINISHLINE												; ^
                                 
0000cd 9508                      	RET																			; Return
                                 
                                 BROADCAST_TACHOMETER:
                                 
0000ce 9150 0060                 	LDS		TXREG, TACHOMETER_H													; Load & transmit HIGH byte of Tachometer data
0000d0 940e 00f0                 	CALL	SERIAL_WRITE														; ^
                                 
0000d2 9150 0061                 	LDS		TXREG, TACHOMETER_L													; Load & transmit HIGH byte of Tachometer data
0000d4 940e 00f0                 	CALL	SERIAL_WRITE														; ^
                                 
0000d6 9508                      	RET																			; Return
                                 
                                 BROADCAST_ACCELEROMETER:
                                 
                                 	;LDS		TXREG, ADC_H														; Load & transmit HIGH byte of ADC (accelerometer) data
0000d7 9150 0073                 	LDS		TXREG, ACCELEROMETER												; Load & transmit Accelerometer data
0000d9 940e 00f0                 	CALL	SERIAL_WRITE														; ^
                                 
0000db 9508                      	RET																			; Return
                                 
                                 BROADCAST_FINISHLINE:
                                 
                                 	// A bit retarded.
                                 	
0000dc 9150 0070                 	LDS		TXREG, FINISHLINE
0000de 940e 00f0                 	CALL	SERIAL_WRITE
                                 
0000e0 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 
                                 BROADCAST_SET:
                                 
0000e1 2d00                      	MOV		TEMP1, MDFLG														; Load & reset current Broadcast Flags in Mode Register
0000e2 7c07                      	ANDI	TEMP1, 0b11000111													; ^
                                 
0000e3 9110 0068                 	LDS		TEMP2, RECENT_DAT													; Load & apply recieved Broadcast Flags
0000e5 2b01                      	OR		TEMP1, TEMP2														; ^
                                 
0000e6 2e00                      	MOV		MDFLG, TEMP1														; Save new mode flags
0000e7 9200 006f                 	STS		MODE_FLG, MDFLG														; Store new mode flags to SRAM
                                 
0000e9 9508                      	RET																			; Return
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> COMMUNICATION PROTOCOL
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > USART
                                 
                                 SERIAL_READ:
                                 	
0000ea 9b5f                      	SBIS	UCSRA, RXC															; Wait for Recieve (RXC) Flag
0000eb cffe                      	RJMP	SERIAL_READ															; ^
                                 
0000ec b14c                      	IN		RXREG, UDR															; Read data into Reception Register
0000ed 9340 006b                 	STS		SERIAL_RX, RXREG													; Store data in SRAM
                                 
0000ef 9508                      	RET																			; Return
                                 
                                 SERIAL_WRITE:
                                 	
0000f0 9b5d                      	SBIS	UCSRA, UDRE															; Wait for Empty Transmit Buffer (UDRE) Flag
0000f1 cffe                      	RJMP	SERIAL_WRITE														; ^
                                 
0000f2 b95c                      	OUT		UDR, TXREG															; Write data from Transmission Register
                                 
0000f3 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > TELEGRAM PARSER
                                 
                                 	// !#!#!#!
                                 	// Needs to be changed to support recent Z pointer from SRAM!
                                 
                                 TELEGRAM_CHECK:
                                 
0000f4 9b5f                      	SBIS	UCSRA, RXC															; Return if no data in USART reception buffer
0000f5 9508                      	RET																			; ^
                                 
0000f6 b14c                      	IN		RXREG, UDR															; Read data into Reception Register
0000f7 9340 006b                 	STS		SERIAL_RX, RXREG													; Store data in SRAM
                                 
                                 TELEGRAM_PARSER:
                                 	
0000f9 9100 0066                 	LDS		TEMP1, TEL_STEP														; Load, increment & store Telegram Step Counter
0000fb 9503                      	INC		TEMP1																; ^
0000fc 9300 0066                 	STS		TEL_STEP, TEMP1														; ^
                                 
0000fe 3001                      	CPI		TEMP1, 1															; Setup Telegram Parser if Step = 1
0000ff f041                      	BREQ	TELEGRAM_PARSE_SETUP												; ^
                                 
000100 3004                      	CPI		TEMP1, 4															; Execute Telegram if Step = 4
000101 f089                      	BREQ	TELEGRAM_EXECUTE													; ^
                                 
000102 3002                      	CPI		TEMP1, 2															; Parse (TYPE) if Step = 2
000103 f041                      	BREQ	TELEGRAM_JUMP														; ^
                                 
000104 95ea                      	DEC		ZL																	; Offset Z pointer (-1) to parse TYPE (0x00_XX)
                                 
000105 3003                      	CPI		TEMP1, 3															; Parse (COMMAND) if Step = 3
000106 f029                      	BREQ	TELEGRAM_JUMP														; ^
                                 
                                 TELEGRAM_PARSER_ESC:
                                 	
000107 9508                      	RET
                                 
                                 TELEGRAM_PARSE_SETUP:
                                 
000108 e0f0                      	LDI		ZH, HIGH(COMMANDS*2)												; Reset Z Pointer to COMMANDS jump table
000109 e5e0                      	LDI 	ZL,  LOW(COMMANDS*2)												; ^
                                 
00010a 95e3                      	INC		ZL																	; Offset Z pointer (+1) to parse COMMAND (0xXX_00)
                                 
00010b cfed                      	RJMP	TELEGRAM_PARSER														; Return
                                 
                                 TELEGRAM_JUMP:
                                 
00010c 9634                      	ADIW	ZH:ZL, 4															; Increment Z Pointer (by 4)
                                 
00010d 9104                      	LPM		TEMP1, Z															; Load the matching duty cycle
                                 
00010e 3e0e                      	CPI		TEMP1, 0xEE															; Reset everything if out of table bounds
00010f f0a1                      	BREQ	TELEGRAM_ERROR														; ^
                                 
000110 1704                      	CP		TEMP1, RXREG														; Find match in jump table
000111 f3a9                      	BREQ	TELEGRAM_PARSER_ESC													; ^
                                 
000112 cff9                      	RJMP	TELEGRAM_JUMP														; Repeat
                                 
                                 TELEGRAM_EXECUTE:
                                 
000113 9632                      	ADIW	ZH:ZL, 2															; Point at & read LOW of Table address
000114 9104                      	LPM		TEMP1, Z															; ^
                                 
000115 9631                      	ADIW	ZH:ZL, 1															; Point at & read HIGH of Table address
000116 9114                      	LPM		TEMP2, Z															; ^
                                 
000117 2fe0                      	MOV		ZL, TEMP1															; Load Z Pointer
000118 2ff1                      	MOV		ZH, TEMP2															; ^
                                 
000119 9340 0068                 	STS		RECENT_DAT, RXREG													; Store recieved data in SRAM
                                 
00011b d00d                      	RCALL	SET_COMMAND_FLG														; Set command pending flag
                                 
                                 TELEGRAM_RESET:
                                 	
00011c 2700                      	CLR		TEMP1																; Reset & store parse step counter
00011d 9300 0066                 	STS		TEL_STEP, TEMP1														; ^
                                 
00011f 9508                      	RET																			; Return
                                 
                                 TELEGRAM_CLRBUFFER:
                                 
000120 b10c                      	IN		TEMP1, UDR															; Empty buffer
000121 995f                      	SBIC	UCSRA, RXC															; ^
000122 cffd                      	RJMP	TELEGRAM_CLRBUFFER													; ^
                                 
000123 9508                      	RET																			; Return
                                 
                                 TELEGRAM_ERROR:
                                 
000124 2744                      	CLR		RXREG																; Clear reception register
                                 
000125 d007                      	RCALL	CLR_COMMAND_FLG														; Clear command pending flag
000126 dff5                      	RCALL	TELEGRAM_RESET														; Reset parse step counter
000127 dff8                      	RCALL	TELEGRAM_CLRBUFFER													; Clear reception buffer
                                 	
000128 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > COMMANDS
                                 
                                 SET_COMMAND_FLG:
                                 
000129 2d01                      	MOV		TEMP1, FNFLG														; Load current Flags Register and set CMDPD bit
00012a 6008                      	SBR		TEMP1, (1<<CMDPD)													; ^
00012b 2e10                      	MOV		FNFLG, TEMP1														; ^
                                 	
00012c 9508                      	RET
                                 
                                 CLR_COMMAND_FLG:
                                 	
00012d 2d01                      	MOV		TEMP1, FNFLG														; Load current Flags Register and clear CMDPD bit
00012e 7f07                      	CBR		TEMP1, (1<<CMDPD)													; ^
00012f 2e10                      	MOV		FNFLG, TEMP1														; ^
                                 	
000130 9508                      	RET
                                 
                                 EXECUTE_COMMAND:
                                 	
000131 dffb                      	RCALL	CLR_COMMAND_FLG														; Clear Command Pending Flag
                                 
000132 9509                      	ICALL																		; Call function of Z-pointer
                                 
000133 9508                      	RET																			; Return
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> DEVICE (RACECAR) CONTROL
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > MOTOR CONTROL
                                 
                                 SET_MOTOR_PWM:
                                 
000134 e60a                      	LDI		TEMP1, 0x6A															; Initialize Waveform Generator (Timer2) (0110_1010)
000135 bd05                      	OUT		TCCR2, TEMP1														; ^
                                 
000136 9100 0068                 	LDS		TEMP1, RECENT_DAT													; Load recent recieved telegram data from SRAM
000138 9300 006d                 	STS		DUTY_CYCLE, TEMP1													; Store loaded Duty Cycle in SRAM
                                 
00013a 2300                      	TST		TEMP1																; Check if PWM is Zero
00013b f011                      	BREQ	SET_MOTOR_MIN														; Stop vehicle if true (or BRAKE)
                                 
00013c bd03                      	OUT		OCR2, TEMP1															; Set Duty Cycle (0-255) on Timer2
                                 
                                 SET_MOTOR_PWM_ESC:
                                 
00013d 9508                      	RET																			; Return
                                 
                                 SET_MOTOR_MIN:
                                 
00013e e000                      	LDI		TEMP1, 0x00															; Disable Timer2
00013f bd05                      	OUT		TCCR2, TEMP1														; ^
                                 
000140 9897                      	CBI 	PORTD, PD7															; Clear BIT on PIN7 of PORTD
000141 cffb                      	RJMP	SET_MOTOR_PWM_ESC													; Return
                                 
000142 cffa                      	RJMP	SET_MOTOR_PWM_ESC													; Return
                                 
                                 SET_MOTOR_MAX:
                                 
000143 9a97                      	SBI 	PORTD, PD7															; Set BIT on PIN7 of PORTD
000144 cff8                      	RJMP	SET_MOTOR_PWM_ESC													; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > MOVING AVERAGE
                                 
                                 	// !#!#!#!
                                 	// Needs to be changed to support an arbitrary SRAM Location!
                                 
                                 MOVAVG:
                                 
000145 91b0 0071                 	LDS		XH, MOVAVG_RECENT_XH												; Load recent MOVAVG X pointer
000147 91a0 0071                 	LDS		XL, MOVAVG_RECENT_XL												; ^
                                 
000149 9100 0064                 	LDS		TEMP1, ADC_H														; Insert ADC_val from high because of ADLAR
00014b 930d                      	ST		X+, TEMP1															
                                 
00014c 38a0                      	CPI		XL, MOVAVG_SIZE														; Check if Pointer should be reset
00014d f409                      	BRNE	MOVAVG_SKIP_RESET													; ^
00014e d005                      	RCALL	MOVAVG_POINTER_RESET												; ^
                                 
                                 MOVAVG_SKIP_RESET:
                                 
00014f 93a0 0071                 	STS		MOVAVG_RECENT_XL, XL												; -
                                 
000151 d00e                      	RCALL	MOVAVG_ADD															; Do Moving Average Addition
000152 d018                      	RCALL	MOVAVG_DIVIDE														; Do Moving Average Division
                                 
000153 9508                      	RET																			; Return
                                 
                                 MOVAVG_POINTER_RESET:
                                 
000154 e0b1                      	LDI		XH, HIGH(MOVAVG_TABLE)												; Load reset values into X Pointer
000155 e0a0                      	LDI		XL,  LOW(MOVAVG_TABLE)												; ^
                                 
000156 9508                      	RET																			; Return
                                 
                                 MOVAVG_SRAM_SETUP:
                                 
000157 e800                      	LDI		TEMP1, MOVAVG_SIZE													; Load size of Moving Average filter into register
                                 
000158 93b0 0071                 	STS		MOVAVG_RECENT_XH, XH												; Store location of X pointer into SRAM
00015a 93a0 0071                 	STS		MOVAVG_RECENT_XL, XL												; ^
                                 
                                 MOVAVG_SRAM_SETUP_LOOP:
                                 	
00015c 930d                      	ST		X+, TEMP1															; Set all values of SRAM to default value
                                 
00015d 38a0                      	CPI		XL, LOW(MOVAVG_TABLE_END)											; Check if reached end of table.
00015e f7e9                      	BRNE	MOVAVG_SRAM_SETUP_LOOP												; ^
                                 
00015f 9508                      	RET																			; Return
                                 
                                 MOVAVG_ADD:
                                 	
000160 2700                      	CLR		TEMP1																; Reset Temporary Register
000161 2711                      	CLR		TEMP2																; ^
000162 2722                      	CLR		TEMP3																; ^
                                 
000163 dff0                      	RCALL	MOVAVG_POINTER_RESET												; Reset X Pointer
                                 
                                 MOVAVG_ADD_LOOP:
                                 	
000164 910d                      	LD		TEMP1, X+ 															; Load value from X pointer location.
000165 0f10                      	ADD		TEMP2, TEMP1														; Add values
                                 
                                 	// Can be changed to SBIC, SREG ..
                                 	
000166 f408                      	BRCC	MOVAVG_ADD_SKIP_CARRY												; Branch if carry is not set
000167 9523                      	INC		TEMP3																; ^
                                 
                                 MOVAVG_ADD_SKIP_CARRY:
                                 
                                 	// Remember to compare XH aswell!
                                 	
000168 38a0                      	CPI		XL, LOW(MOVAVG_TABLE_END)											; Check if reached end of table.
000169 f7d1                      	BRNE	MOVAVG_ADD_LOOP														; ^
                                 
00016a 9508                      	RET																			; Return
                                 
                                 MOVAVG_DIVIDE:
                                 
00016b e007                      	LDI		TEMP1, MOVAVG_DIVS													; Load number of Divisions
                                 
                                 MOVAVG_DIVIDE_LOOP:
                                 
00016c 9525                      	ASR		TEMP3																; TEMP3 IS HIGH
00016d 9517                      	ROR		TEMP2																; TEMP2 IS LOW
                                 
00016e 950a                      	DEC		TEMP1																; Perform 16 bit divison until done
00016f f7e1                      	BRNE	MOVAVG_DIVIDE_LOOP													; ^
                                 
000170 9310 0073                 	STS		ACCELEROMETER, TEMP2												; Save value of division into SRAM
                                 
000172 9508                      	RET																			; Return
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> CONTROL UNIT
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > FLAGS
                                 
                                 LOAD_FLAGS:
                                 	
000173 94f8                      	CLI																			; Disable Interrupts
                                 
000174 9100 006e                 	LDS		TEMP1, FUNC_FLG														; Merge SRAM Function Flags from SRAM with Register Function Flags
000176 2a10                      	OR		FNFLG, TEMP1														; ^
                                 
000177 2700                      	CLR		TEMP1																; Reset SRAM Function Flags
000178 9300 006e                 	STS		FUNC_FLG, TEMP1														; ^
                                 
00017a 9478                      	SEI																			; Enable Interrupts
                                 
00017b 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > CLOCK
                                 
                                 CLOCK:
                                 
00017c 0000                      	NOP																			; Do Something
                                 
00017d 2d01                      	MOV		TEMP1, FNFLG														; Clear Timer1 Flag
00017e 7f0b                      	CBR		TEMP1, TMR1															; ^
00017f 2e10                      	MOV		FNFLG, TEMP1														; ^
                                 
000180 9508                      	RET																			; Return
                                 
                                 ;  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                                 ;  > PURE TESTING
                                 
                                 EMPTY:
000181 0000                      	NOP
000182 9508                      	RET
                                 
                                 TEST:
                                 
000183 e30c                      	LDI		TEMP1, 60
000184 9300 0068                 	STS		RECENT_DAT, TEMP1
                                 
000186 940e 0134                 	CALL	SET_MOTOR_PWM
000188 940e 018f                 	CALL	DELAY
00018a 940e 013e                 	CALL	SET_MOTOR_MIN
00018c 940e 018f                 	CALL	DELAY
                                 
00018e 9508                      	RET
                                 
                                 DELAY:
00018f e604                          LDI		TEMP1, 100
                                 LOOP3:
000190 e614                      	LDI		TEMP2, 100
                                 LOOP2:
000191 e624                      	LDI		TEMP3, 100
                                 LOOP1:
000192 952a                          DEC		TEMP3
000193 f7f1                          BRNE	LOOP1
000194 951a                          DEC		TEMP2
000195 f7d9                          BRNE	LOOP2
000196 950a                          DEC		TEMP1
000197 f7c1                          BRNE	LOOP3
                                 
000198 9508                          RET
                                 
                                 ; ____________________________________________________________________________________________________________________________________________________
                                 ; >> INTERRUPT HANDLERS
                                 
                                 INT0_HANDLER:
                                 	
000199 9130 006e                 	LDS		TEMPI, FUNC_FLG														; Load Function Flags from SRAM into Temporary Interrupt Register
00019b 9468                      	SET																			; Set T flag
00019c f937                      	BLD		TEMPI, TACHO														; Set BIT in Temporary Interrupt Register
00019d 9330 006e                 	STS		FUNC_FLG, TEMPI														; Store Function Flags to SRAM
                                 
00019f 9518                      	RETI																		; Return
                                 
                                 INT1_HANDLER:
                                 	
0001a0 9130 006e                 	LDS		TEMPI, FUNC_FLG														; Load Function Flags from SRAM into Temporary Interrupt Register
0001a2 9468                      	SET																			; Set T flag
0001a3 f936                      	BLD		TEMPI, FNLNE														; Set BIT in Temporary Interrupt Register
0001a4 9330 006e                 	STS		FUNC_FLG, TEMPI														; Store Function Flags to SRAM
                                 
0001a6 9518                      	RETI																		; Return
                                 
                                 TMR1_HANDLER:
                                 	
0001a7 9130 006e                 	LDS		TEMPI, FUNC_FLG														; Load Function Flags from SRAM into Temporary Interrupt Register
0001a9 9468                      	SET																			; Set T flag
0001aa f934                      	BLD		TEMPI, TMR1															; Set BIT in Temporary Interrupt Register
0001ab 9330 006e                 	STS		FUNC_FLG, TEMPI														; Store Function Flags to SRAM
                                 
0001ad 9518                      	RETI																		; Return
                                 
                                 ADC_HANDLER:
                                 
0001ae 9130 006e                 	LDS		TEMPI, FUNC_FLG														; Load Function Flags from SRAM into Temporary Interrupt Register
0001b0 9468                      	SET																			; Set T flag
0001b1 f935                      	BLD		TEMPI, ACCLR														; Set BIT in Temporary Interrupt Register
0001b2 9330 006e                 	STS		FUNC_FLG, TEMPI														; Store Function Flags to SRAM		
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32" register use summary:
x  :   3 y  :   0 z  :   3 r0 :   8 r1 :  21 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 119 r17:  10 r18:   5 r19:  12 r20:   8 
r21:   6 r22:   0 r23:   0 r24:   3 r25:   3 r26:   7 r27:   3 r28:   0 
r29:   0 r30:   7 r31:   5 
Registers used: 16 out of 35 (45.7%)

"ATmega32" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   1 adiw  :   4 and   :   1 
andi  :   1 asr   :   1 bclr  :   0 bld   :   4 brbc  :   0 brbs  :   0 
brcc  :   1 brcs  :   0 break :   0 breq  :  10 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   7 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  19 cbi   :   1 cbr   :   5 
clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  11 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   1 cpc   :   0 
cpi   :  11 cpse  :   0 dec   :   5 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   1 ijmp  :   0 in    :   5 inc   :   3 jmp   :   5 
ld    :   1 ldd   :   0 ldi   :  32 lds   :  17 lpm   :   6 lsl   :   0 
lsr   :   0 mov   :  16 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   7 or    :   2 ori   :   0 out   :  23 pop   :   0 
push  :   0 rcall :  12 ret   :  31 reti  :   4 rjmp  :  10 rol   :   0 
ror   :   1 sbc   :   0 sbci  :   0 sbi   :   5 sbic  :   1 sbis  :   3 
sbiw  :   0 sbr   :   1 sbrc  :   8 sbrs  :   2 sec   :   0 seh   :   0 
sei   :   2 sen   :   0 ser   :   0 ses   :   0 set   :   4 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   2 std   :   0 sts   :  30 
sub   :   0 subi  :   0 swap  :   0 tst   :   1 wdr   :   0 
Instructions used: 45 out of 113 (39.8%)

"ATmega32" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00036a    774     40    814   32768   2.5%
[.dseg] 0x000060 0x000060      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
